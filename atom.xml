<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>郑维维个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://9240.github.io/"/>
  <updated>2019-10-06T14:40:02.109Z</updated>
  <id>https://9240.github.io/</id>
  
  <author>
    <name>郑维维</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js中apply,call,和bind函数</title>
    <link href="https://9240.github.io/2019/05/02/js%E4%B8%ADapply,call,%E5%92%8Cbind%E5%87%BD%E6%95%B0/"/>
    <id>https://9240.github.io/2019/05/02/js中apply,call,和bind函数/</id>
    <published>2019-05-01T16:00:00.000Z</published>
    <updated>2019-10-06T14:40:02.109Z</updated>
    
    <content type="html"><![CDATA[<p>apply()，call()，和bind()都是用来改变函数执行时的上下文，也就是改变this的指向问题，是prototype的方法，引入是因为js没有将this设置成形参。一般都是库里面用，不推荐自己使用call和apply。<br>call()和apply()唯一区别是参数不一样，call()是apply()的语法糖；<br>bind()是返回一个新函数，相比其他两个比较常用。而apply()和call()是立即调用。<br><a id="more"></a><br>如果不需要关心具体有多少参数被传入函数，选用apply()；<br>如果确定函数可接收多少个参数，用call()；<br>如果我们想要之后再调用方法，不需立即得到函数返回结果，使用bind();</p><h2 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h2><p>使用 apply， 你可以继承其他对象的方法：<br>这里apply()的第一个参数是null，在非严格模式下，第一个参数为null或者undefined时会自动替换为指向全局对象，apply()的第二个参数为数组或类数组。</p><h2 id="call"><a href="#call" class="headerlink" title="call()"></a>call()</h2><p>call()是apply()的语法糖，作用和apply()一样，同样可实现继承，唯一的区别就在于call()接收的是参数列表，而apply()则接收参数数组。</p><h2 id="bind"><a href="#bind" class="headerlink" title="bind()"></a>bind()</h2><p>bind()的作用与call()和apply()一样，都是可以改变函数运行时上下文，区别是call()和apply()在调用函数之后会立即执行，而bind()方法调用并改变函数运行时上下文后，返回一个新的函数，并未执行。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;apply()，call()，和bind()都是用来改变函数执行时的上下文，也就是改变this的指向问题，是prototype的方法，引入是因为js没有将this设置成形参。一般都是库里面用，不推荐自己使用call和apply。&lt;br&gt;call()和apply()唯一区别是参数不一样，call()是apply()的语法糖；&lt;br&gt;bind()是返回一个新函数，相比其他两个比较常用。而apply()和call()是立即调用。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://9240.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>力软前端组件</title>
    <link href="https://9240.github.io/2019/04/10/%E5%8A%9B%E8%BD%AF%E5%89%8D%E7%AB%AF%E7%BB%84%E4%BB%B6/"/>
    <id>https://9240.github.io/2019/04/10/力软前端组件/</id>
    <published>2019-04-09T16:00:00.000Z</published>
    <updated>2019-04-30T05:45:13.456Z</updated>
    
    <content type="html"><![CDATA[<p>我看到的力软敏捷开发框架的文档写的相当简洁，且只有部分组件的文档。为了以后加入的伙伴能更快的上手，也为了自己提升开发效率，于是对着源代码写了下面的文档，由于项目需要，部分组件进行了细微修改，另外由于其他原因，所有组件名都更改为waxxx字样。</p><center><img src="https://images.pexels.com/photos/2089379/pexels-photo-2089379.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=1&amp;w=500" alt=""></center><h2 id="一-时间查询框"><a href="#一-时间查询框" class="headerlink" title="一.时间查询框"></a>一.时间查询框</h2><p><strong>方法：$(‘#id’).wadate(op);</strong><br><a id="more"></a></p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th><th style="text-align:center">默认</th></tr></thead><tbody><tr><td style="text-align:center">dfdata</td><td style="text-align:center">自定义数据</td><td style="text-align:center">[]</td></tr><tr><td style="text-align:center">mShow</td><td style="text-align:center">是否显示当月按钮</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">premShow</td><td style="text-align:center">是否显示上月按钮</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">jShow</td><td style="text-align:center">是否显示当季度按钮</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">prejShow</td><td style="text-align:center">是否显示上季度按钮</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">premShow</td><td style="text-align:center">是否显示上月按钮</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">ysShow</td><td style="text-align:center">是否显示上半年按钮</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">yxShow</td><td style="text-align:center">是否显示下半年按钮</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">preyShow</td><td style="text-align:center">是否显示去年按钮</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">yShow</td><td style="text-align:center">是否显示今年按钮</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">dfvalue</td><td style="text-align:center">默认选择值</td><td style="text-align:center">未选择[preM/currentM/preJ/currentJ/yS/yX/preY/currentY/zhua]</td></tr><tr><td style="text-align:center">selectfn</td><td style="text-align:center">选择后回调函数</td><td style="text-align:center">false</td></tr></tbody></table><p><strong>代码示例：</strong></p><pre><code>$(&quot;#id&quot;).wadate({     dfdata: [         { name: &apos;今天&apos;, begin: function () { return learun.getDate(&apos;yyyy-MM-dd 00:00:00&apos;) }, end: function () { return learun.getDate(&apos;yyyy-MM-dd 23:59:59&apos;) } },         { name: &apos;近7天&apos;, begin: function () { return learun.getDate(&apos;yyyy-MM-dd 00:00:00&apos;, &apos;d&apos;, -6) }, end: function () { return learun.getDate(&apos;yyyy-MM-dd 23:59:59&apos;) } },         { name: &apos;近1个月&apos;, begin: function () { return learun.getDate(&apos;yyyy-MM-dd 00:00:00&apos;, &apos;m&apos;, -1) }, end: function () { return learun.getDate(&apos;yyyy-MM-dd 23:59:59&apos;) } },         { name: &apos;近3个月&apos;, begin: function () { return learun.getDate(&apos;yyyy-MM-dd 00:00:00&apos;, &apos;m&apos;, -3) }, end: function () { return learun.getDate(&apos;yyyy-MM-dd 23:59:59&apos;) } },     ],     mShow: false,     premShow: false,     jShow: false,     prejShow: false,     ysShow: false,     yxShow: false,     preyShow: false,     yShow: false,     dfvalue: &apos;1&apos;,     selectfn: function (begin, end) {         logbegin = begin;         logend = end;         page.search();     } });</code></pre><h2 id="二-下拉选择框"><a href="#二-下拉选择框" class="headerlink" title="二.下拉选择框"></a>二.下拉选择框</h2><p><strong>方法：$(‘#id’).waselect(op);</strong></p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th><th style="text-align:center">默认</th></tr></thead><tbody><tr><td style="text-align:center">placeholder</td><td style="text-align:center">占位符</td><td style="text-align:center">请选择</td></tr><tr><td style="text-align:center">type</td><td style="text-align:center">数据展示类型1.default：普通；2.tree：树形数据；3.treemultiple：树形多选；multiple：普通多选</td><td style="text-align:center">default</td></tr><tr><td style="text-align:center">value</td><td style="text-align:center">数据值字段名</td><td style="text-align:center">id</td></tr><tr><td style="text-align:center">text</td><td style="text-align:center">数据显示字段名</td><td style="text-align:center">text</td></tr><tr><td style="text-align:center">title</td><td style="text-align:center">数据标题字段名</td><td style="text-align:center">title</td></tr><tr><td style="text-align:center">maxHeight</td><td style="text-align:center">下拉框最大高度</td><td style="text-align:center">200</td></tr><tr><td style="text-align:center">width</td><td style="text-align:center">下拉框宽度</td><td style="text-align:center">跟随输入框宽度</td></tr><tr><td style="text-align:center">allowSearch</td><td style="text-align:center">是否允许搜索</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">url</td><td style="text-align:center">获取数据地址</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">data</td><td style="text-align:center">下拉选择数据</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">param</td><td style="text-align:center">请求后台参数</td><td style="text-align:center">Null</td></tr><tr><td style="text-align:center">method</td><td style="text-align:center">请求后台方法：GET、POST</td><td style="text-align:center">GET</td></tr><tr><td style="text-align:center">select</td><td style="text-align:center">选择后回调函数</td><td style="text-align:center">false</td></tr></tbody></table><h2 id="三-树形插件"><a href="#三-树形插件" class="headerlink" title="三.树形插件"></a>三.树形插件</h2><p><strong>方法：$(‘#id’).watree(op);</strong></p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th><th style="text-align:center">默认</th></tr></thead><tbody><tr><td style="text-align:center">icons</td><td style="text-align:center">图标</td><td style="text-align:center">checkbox_0.png[checkbox_0.png/checkbox_1.png/checkbox_2.png]</td></tr><tr><td style="text-align:center">method</td><td style="text-align:center">请求后台方法：GET、POST</td><td style="text-align:center">GET</td></tr><tr><td style="text-align:center">url</td><td style="text-align:center">请求后台地址</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">param</td><td style="text-align:center">请求参数</td><td style="text-align:center">Null</td></tr><tr><td style="text-align:center">data</td><td style="text-align:center">数据集</td><td style="text-align:center">[]</td></tr><tr><td style="text-align:center">isAllExpand</td><td style="text-align:center">节点是否展开</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">cbiconpath</td><td style="text-align:center">节点前的图标路径</td><td style="text-align:center">/Content/images/wayperfecttree/</td></tr><tr><td style="text-align:center">nodeClick</td><td style="text-align:center">点击事件</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">nodeCheck</td><td style="text-align:center">选中事件</td><td style="text-align:center">false</td></tr></tbody></table><p><strong>代码示例：</strong></p><pre><code>$(&apos;#id&apos;).watree({    url: top.$.rootUrl + &apos;/LR_OrganizationModule/Company/GetTree&apos;,    icons:&quot;&quot;,    method:&quot;GET&quot;,    isAllExpand:false,    cbiconpath:&quot;&quot;,    param: { },    nodeClick:function(){    },    nodeCheck:function(){    }});</code></pre><p><strong>data数据格式</strong></p><pre><code>[{    id,    text,显示数据    value,选中值    showcheck,bool,是否显示多选框    checkstate,int,选中状态 0未选中 1选中    hasChildren,bool,是否有子节点    isexpand,bool,是否展开    complete,bool    ChildNodes,[],子节点数据}]</code></pre><p><strong>拓展方法 $(‘#id’).watreeSet(name,op)（具体使用参照源码）;</strong></p><table><thead><tr><th style="text-align:center">name可选值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">allNoCheck</td><td style="text-align:center">获取未选中项</td></tr><tr><td style="text-align:center">allCheck</td><td style="text-align:center">获取选中项</td></tr><tr><td style="text-align:center">setCheck</td><td style="text-align:center">置为选中</td></tr><tr><td style="text-align:center">setValue</td><td style="text-align:center">设置value</td></tr><tr><td style="text-align:center">currentItem</td><td style="text-align:center">获取当前选中item</td></tr><tr><td style="text-align:center">getCheckNodesEx</td><td style="text-align:center">获取最下面的选中项</td></tr><tr><td style="text-align:center">getCheckNodeIds</td><td style="text-align:center">获取选中id,返回数组格式</td></tr><tr><td style="text-align:center">search</td><td style="text-align:center">节点搜索</td></tr><tr><td style="text-align:center">refresh</td><td style="text-align:center">刷新树结构</td></tr><tr><td style="text-align:center">getCheckNodeIdsByPath</td><td style="text-align:center">(当前版本未实现)</td></tr><tr><td style="text-align:center">addNode</td><td style="text-align:center">添加节点(当前版本未实现)</td></tr><tr><td style="text-align:center">updateNode</td><td style="text-align:center">更新节点(当前版本未实现)</td></tr></tbody></table><h2 id="四-表格插件"><a href="#四-表格插件" class="headerlink" title="四.表格插件"></a>四.表格插件</h2><p><strong>方法：$(“#id”).jfGrid(op);</strong></p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th><th style="text-align:center">默认</th></tr></thead><tbody><tr><td style="text-align:center">url</td><td style="text-align:center">数据服务地址</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">param</td><td style="text-align:center">请求参数</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">rowdatas</td><td style="text-align:center">列表数据</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">subGridData</td><td style="text-align:center">子列表数据</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">datatype</td><td style="text-align:center">数据类型</td><td style="text-align:center">array</td></tr><tr><td style="text-align:center">headData</td><td style="text-align:center">表格列数据</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">isShowNum</td><td style="text-align:center">是否显示序号</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">isMultiselect</td><td style="text-align:center">是否允许多选</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">multiselectfield</td><td style="text-align:center">多选绑定字段</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">isSubGrid</td><td style="text-align:center">是否有子表</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">subGridRowExpanded</td><td style="text-align:center">子表展开后回调函数</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">subGridHeight</td><td style="text-align:center">子表高度</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">onSelectRow</td><td style="text-align:center">选中一行后回调函数</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">onRenderComplete</td><td style="text-align:center">表格加载完后调用</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">isPage</td><td style="text-align:center">是否分页</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">sort</td><td style="text-align:center">是否排序</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">sidx</td><td style="text-align:center">排序字段</td><td style="text-align:center">‘’</td></tr><tr><td style="text-align:center">sord</td><td style="text-align:center">排序方式</td><td style="text-align:center">ASC</td></tr><tr><td style="text-align:center">isTree</td><td style="text-align:center">是否树形显示（没有分页的情况下才支持）</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">mainId</td><td style="text-align:center">关联的主键</td><td style="text-align:center">id</td></tr><tr><td style="text-align:center">parentId</td><td style="text-align:center">树形关联字段</td><td style="text-align:center">parentId</td></tr><tr><td style="text-align:center">reloadSelected</td><td style="text-align:center">刷新后是否还选择之前选中的,只支持单选</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">isAutoHeight</td><td style="text-align:center">自动适应表格高度</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">footerrow</td><td style="text-align:center">底部合计条</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">isEidt</td><td style="text-align:center">是否编辑</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">minheight</td><td style="text-align:center">最低高度</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">height</td><td style="text-align:center">高度</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">isStatistics</td><td style="text-align:center">统计条</td><td style="text-align:center">false</td></tr></tbody></table><p><strong>data数据格式</strong></p><pre><code>[{    page:1,页码    records:722,数据条数    rows:[],展示的数据    total：15,页数}]</code></pre><p><strong>拓展方法1:$(‘#id’).jfGridSet(name,op)（具体使用参照源码）;</strong></p><table><thead><tr><th style="text-align:center">name可选值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">reload</td><td style="text-align:center">刷新表格</td></tr><tr><td style="text-align:center">refreshdata</td><td style="text-align:center">更新数据</td></tr><tr><td style="text-align:center">addRow</td><td style="text-align:center">添加行</td></tr><tr><td style="text-align:center">updateRow</td><td style="text-align:center">更新（修改）行</td></tr><tr><td style="text-align:center">removeRow</td><td style="text-align:center">移除（删除）行</td></tr></tbody></table><p><strong>拓展方法2:$(‘#id’).jfGridGet(name)（具体使用参照源码）;</strong></p><table><thead><tr><th style="text-align:center">name可选值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">rowdata</td><td style="text-align:center">返回选中行</td></tr><tr><td style="text-align:center">rowdatas</td><td style="text-align:center">返回表格所有数据（当前页）</td></tr><tr><td style="text-align:center">rowdatasByArray</td><td style="text-align:center">树形结构转数组</td></tr><tr><td style="text-align:center">settingInfo</td><td style="text-align:center">返回表格所有信息</td></tr><tr><td style="text-align:center">showData</td><td style="text-align:center">返回当前页可见的所有数据（1,2,5区别）</td></tr></tbody></table><h2 id="五-弹框组件-wa-layer-js"><a href="#五-弹框组件-wa-layer-js" class="headerlink" title="五.弹框组件(wa-layer.js)"></a>五.弹框组件(wa-layer.js)</h2><p>1.询问框</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th><th style="text-align:center">默认</th></tr></thead><tbody><tr><td style="text-align:center">msg</td><td style="text-align:center">询问框的展示信息</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">callback</td><td style="text-align:center">关闭时的回调函数</td></tr></tbody></table><p><strong>代码示例：</strong></p><pre><code>layerConfirm(&quot;提示信息&quot;，function(){    //do something})</code></pre><p>2.自定义表单弹层</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th><th style="text-align:center">默认</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">id</td><td style="text-align:center">null</td></tr><tr><td style="text-align:center">title</td><td style="text-align:center">标题</td><td style="text-align:center">系统窗口</td></tr><tr><td style="text-align:center">width</td><td style="text-align:center">宽度</td><td style="text-align:center">550</td></tr><tr><td style="text-align:center">height</td><td style="text-align:center">高度</td><td style="text-align:center">400</td></tr><tr><td style="text-align:center">url</td><td style="text-align:center">弹框页面url</td><td style="text-align:center">error</td></tr><tr><td style="text-align:center">btn</td><td style="text-align:center">页面底部按钮</td><td style="text-align:center">[‘确认’,’关闭’]</td></tr><tr><td style="text-align:center">callBack</td><td style="text-align:center">第一个按钮点击的回调函数</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">maxmin</td><td style="text-align:center">是否允许最大最小</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">end</td><td style="text-align:center">窗体关闭后的回调函数</td><td style="text-align:center">false</td></tr></tbody></table><p><strong>代码示例：</strong></p><pre><code>wayperfect.layerForm({    id: &apos;form&apos;,    title: &apos;新增&apos;,    url: top.$.rootUrl + &apos;/WA_CodeDemo/Consumer/Form&apos;,    width: 600,    height: 400,    callBack: function (id) {        return top[id].acceptClick(refreshGirdData);    }});</code></pre><h2 id="六-日期组件-wa-data-js"><a href="#六-日期组件-wa-data-js" class="headerlink" title="六.日期组件(wa-data.js)"></a>六.日期组件(wa-data.js)</h2><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center">parseDate(strDate)</td><td style="text-align:center">字串转化成日期</td><td style="text-align:center">wayperfect.parseDate(“2019-02-20”)</td></tr><tr><td style="text-align:center">formatDate(v, format)</td><td style="text-align:center">日期格式化v日期,format:格式</td><td style="text-align:center">wayperfect.formatDate(‘/Date(1550646100652)/‘,”yyyy-MM-dd-hh:mm:ss”)</td></tr><tr><td style="text-align:center">getDate(format, strInterval, Number)</td><td style="text-align:center">获取当前时间,format为格式,strInterval为[s,n,h,d,w,q,m,y],strInterval增加的数（可负）</td><td style="text-align:center">wayperfect.getDate(“yyyy-MM-dd-hh:mm:ss”,’d’,-3)</td></tr><tr><td style="text-align:center">getMonth()</td><td style="text-align:center">当前月的开始时间与结束时间</td><td style="text-align:center">null</td></tr><tr><td style="text-align:center">getPreMonth()</td><td style="text-align:center">上个月的开始与结束时间</td><td style="text-align:center">null</td></tr><tr><td style="text-align:center">getCurrentQuarter()</td><td style="text-align:center">当前季度的开始与结束时间</td><td style="text-align:center">null</td></tr><tr><td style="text-align:center">getPreQuarter()</td><td style="text-align:center">上个季度的开始与结束时间</td><td style="text-align:center">null</td></tr><tr><td style="text-align:center">getQuarter(Year, month)</td><td style="text-align:center">指定Year,month所在季度的开始与结束时间</td><td style="text-align:center">wayperfect.getQuarter(2019,8)</td></tr><tr><td style="text-align:center">getYear()</td><td style="text-align:center">当前年份的开始时间与结束时间</td><td style="text-align:center">null</td></tr><tr><td style="text-align:center">getPreYear()</td><td style="text-align:center">上一年份的开始时间与结束时间</td><td style="text-align:center">null</td></tr><tr><td style="text-align:center">getFirstHalfYear()</td><td style="text-align:center">当前年份的上半年开始时间与结束时间</td><td style="text-align:center">null</td></tr><tr><td style="text-align:center">getSecondHalfYear()</td><td style="text-align:center">当前年份的下半年开始时间与结束时间</td><td style="text-align:center">null</td></tr></tbody></table><h3 id="原型链上添加的四个方法"><a href="#原型链上添加的四个方法" class="headerlink" title="原型链上添加的四个方法"></a>原型链上添加的四个方法</h3><ul><li>日期计算：DateAdd(strInterval,Number)</li><li>比较日期差 dtEnd 格式为日期型或者 有效日期格式字符串：DateDiff（strInterval,dtEnd）</li><li>取得当前日期所在月的最大天数：MaxDayOfDate()</li><li>判断闰年：isLeapYear（）</li></ul><h2 id="七-ajax操作方法（wa-ajax-js）"><a href="#七-ajax操作方法（wa-ajax-js）" class="headerlink" title="七.ajax操作方法（wa-ajax.js）"></a>七.ajax操作方法（wa-ajax.js）</h2><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">httpErrorLog</td><td style="text-align:center">通信异常调用</td></tr><tr><td style="text-align:center">httpCode</td><td style="text-align:center">http请求返回数据码</td></tr><tr><td style="text-align:center">httpAsyncGet(url,callback)</td><td style="text-align:center">get请求方法（异步）:url地址,callback回调函数</td></tr><tr><td style="text-align:center">httpGet(url,param)</td><td style="text-align:center">get请求方法（同步）:url地址,param参数</td></tr><tr><td style="text-align:center">httpAsyncPost(url,param,callback)</td><td style="text-align:center">post请求方法（异步）:url地址,param参数,callback回调函数</td></tr><tr><td style="text-align:center">httpPost(url,param,callback)</td><td style="text-align:center">post请求方法（同步步）:url地址,param参数,callback回调函数</td></tr><tr><td style="text-align:center">httpAsync(type,url,param,callback)</td><td style="text-align:center">ajax 异步封装</td></tr><tr><td style="text-align:center">deleteForm(url,param,callback)</td><td style="text-align:center">异步post删除数据</td></tr><tr><td style="text-align:center">postForm(url,param,callback)</td><td style="text-align:center">异步post提交数据</td></tr></tbody></table><h2 id="八-基础操作类（wa-base-js）"><a href="#八-基础操作类（wa-base-js）" class="headerlink" title="八.基础操作类（wa-base.js）"></a>八.基础操作类（wa-base.js）</h2><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">newGuid</td><td style="text-align:center">返回一个32位的字符串</td></tr><tr><td style="text-align:center">loading(isShow,text)</td><td style="text-align:center">加载提示</td></tr><tr><td style="text-align:center">loadstyles(url)</td><td style="text-align:center">动态加载css文件</td></tr><tr><td style="text-align:center">iframe(Id,_frames)</td><td style="text-align:center">获取iframe</td></tr><tr><td style="text-align:center">changeUrlParam(url,key,value)</td><td style="text-align:center">改变url参数值</td></tr><tr><td style="text-align:center">toDecimal(num)</td><td style="text-align:center">把num转化为10进制</td></tr><tr><td style="text-align:center">countFileSize(size)</td><td style="text-align:center">文件大小转换(byte转成KB，MB，GB)</td></tr><tr><td style="text-align:center">arrayCopy(data)</td><td style="text-align:center">数组复制</td></tr><tr><td style="text-align:center">checkrow（id）</td><td style="text-align:center">检测数据是否选中</td></tr><tr><td style="text-align:center">alert.[success，info，warning，error] (msg)</td><td style="text-align:center">提示消息</td></tr><tr><td style="text-align:center">download(options)</td><td style="text-align:center">下载文件options={method,url,param},默认GET</td></tr><tr><td style="text-align:center">commafy(num)</td><td style="text-align:center">数字格式转换成千分位</td></tr></tbody></table><hr><h2 id="九-表单验证（wa-validator-helper-js）"><a href="#九-表单验证（wa-validator-helper-js）" class="headerlink" title="九.表单验证（wa-validator-helper.js）"></a>九.表单验证（wa-validator-helper.js）</h2><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">isNotNull(obj)</td><td style="text-align:center">验证不为空</td></tr><tr><td style="text-align:center">isNum(obj)</td><td style="text-align:center">验证数字</td></tr><tr><td style="text-align:center">isNumOrNull(obj)</td><td style="text-align:center">验证数字 或者 空</td></tr><tr><td style="text-align:center">isEmail(obj)</td><td style="text-align:center">验证Email</td></tr><tr><td style="text-align:center">isEmailOrNull</td><td style="text-align:center">Email验证 email   或者null,空</td></tr><tr><td style="text-align:center">isEnglishStr(obj)</td><td style="text-align:center">验证只能输入英文字符串</td></tr><tr><td style="text-align:center">isEnglishStrOrNull(obj)</td><td style="text-align:center">验证只能输入英文字符串 或者null,空</td></tr><tr><td style="text-align:center">isTelephone(obj)</td><td style="text-align:center">验证是否电话号码 phone</td></tr><tr><td style="text-align:center">isTelephoneOrNull(obj)</td><td style="text-align:center">验证是否电话号码 phone或者null,空</td></tr><tr><td style="text-align:center">isMobile(obj)</td><td style="text-align:center">验证是否手机号 mobile</td></tr><tr><td style="text-align:center">isMobileOrnull(obj)</td><td style="text-align:center">验证是否手机号 mobile或者null,空</td></tr><tr><td style="text-align:center">isMobileOrPhone(obj)</td><td style="text-align:center">验证是否手机号或电话号码 mobile phone</td></tr><tr><td style="text-align:center">isMobileOrPhoneOrNull(obj)</td><td style="text-align:center">验证是否手机号或电话号码 mobile phone或者null,空</td></tr><tr><td style="text-align:center">isUri(obj)</td><td style="text-align:center">验证网址 uri</td></tr><tr><td style="text-align:center">isUriOrNull(obj)</td><td style="text-align:center">验证网址 uri或者null,空</td></tr><tr><td style="text-align:center">isDate(obj)</td><td style="text-align:center">判断日期类型是否为YYYY-MM-DD格式的类型 date</td></tr><tr><td style="text-align:center">isDateOrNull(obj)</td><td style="text-align:center">判断日期类型是否为YYYY-MM-DD格式的类型 date或者null,空</td></tr><tr><td style="text-align:center">isDateTime(obj)</td><td style="text-align:center">判断日期类型是否为YYYY-MM-DD hh:mm:ss格式的类型 datetime</td></tr><tr><td style="text-align:center">isDateTimeOrNull(obj)</td><td style="text-align:center">判断日期类型是否为YYYY-MM-DD hh:mm:ss格式的类型 datetime或者null,空</td></tr><tr><td style="text-align:center">isTime(obj)</td><td style="text-align:center">判断日期类型是否为hh:mm:ss格式的类型 time</td></tr><tr><td style="text-align:center">isTimeOrNull(obj)</td><td style="text-align:center">判断日期类型是否为hh:mm:ss格式的类型 time或者null,空</td></tr><tr><td style="text-align:center">isChinese(obj)</td><td style="text-align:center">判断输入的字符是否为中文</td></tr><tr><td style="text-align:center">isChineseOrNull(obj)</td><td style="text-align:center">判断输入的字符是否为中文 cchar或者null,空</td></tr><tr><td style="text-align:center">isZip(obj)</td><td style="text-align:center">判断输入的邮编(只能为六位)是否正确 zip</td></tr><tr><td style="text-align:center">isZipOrNull(obj)</td><td style="text-align:center">判断输入的邮编(只能为六位)是否正确 zip或者null,空</td></tr><tr><td style="text-align:center">isDouble(obj)</td><td style="text-align:center">判断输入的字符是否为双精度 double</td></tr><tr><td style="text-align:center">isDoubleOrNull(obj)</td><td style="text-align:center">判断输入的字符是否为双精度 double或者null,空</td></tr><tr><td style="text-align:center">isIDCard(obj)</td><td style="text-align:center">判断是否为身份证 idcard</td></tr><tr><td style="text-align:center">isIDCardOrNull(obj)</td><td style="text-align:center">判断是否为身份证 idcard或者null,空</td></tr><tr><td style="text-align:center">isIP(obj)</td><td style="text-align:center">判断是否为IP地址格式</td></tr><tr><td style="text-align:center">isIPOrNull(obj)</td><td style="text-align:center">判断是否为IP地址格式 或者null,空</td></tr><tr><td style="text-align:center">isLenNum(obj,n)</td><td style="text-align:center">验证是否是n位数字字符串编号 nnum</td></tr><tr><td style="text-align:center">isLenNumOrNull(obj,n)</td><td style="text-align:center">验证是否是n位数字字符串编号 nnum或者null,空</td></tr><tr><td style="text-align:center">isLenStr(obj,n)</td><td style="text-align:center">验证是否小于等于n位数的字符串 nchar</td></tr><tr><td style="text-align:center">isLenStrOrNull(obj,n)</td><td style="text-align:center">验证是否小于等于n位数的字符串 nchar或者null,空</td></tr></tbody></table><h2 id="十-右键插件（contextmenu）"><a href="#十-右键插件（contextmenu）" class="headerlink" title="十.右键插件（contextmenu）"></a>十.右键插件（contextmenu）</h2><p><strong>示例</strong></p><pre><code>$(&quot;#girdtable&quot;).wacontextmenu({    menulist: [        { id: 1, text: &quot;复制&quot; },        { id: 2, text: &quot;粘贴&quot; }    ],    before:false})</code></pre><h2 id="十一-弹层选择控件（formselect）"><a href="#十一-弹层选择控件（formselect）" class="headerlink" title="十一.弹层选择控件（formselect）"></a>十一.弹层选择控件（formselect）</h2><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th><th style="text-align:center">默认</th></tr></thead><tbody><tr><td style="text-align:center">placeholder</td><td style="text-align:center">默认展示字样</td><td style="text-align:center">“请选择”</td></tr><tr><td style="text-align:center">icon</td><td style="text-align:center">图标</td><td style="text-align:center">“fa-plus”</td></tr><tr><td style="text-align:center">layerUrl</td><td style="text-align:center">弹层地址</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">layerParam</td><td style="text-align:center">弹层参数</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">layerUrlW</td><td style="text-align:center">弹层宽度</td><td style="text-align:center">600</td></tr><tr><td style="text-align:center">layerUrlH</td><td style="text-align:center">弹层高度</td><td style="text-align:center">400</td></tr><tr><td style="text-align:center">dataUrl</td><td style="text-align:center">获取数据地址</td><td style="text-align:center">null</td></tr><tr><td style="text-align:center">select</td><td style="text-align:center">选择事件</td><td style="text-align:center">false</td></tr></tbody></table><p><strong>示例代码:</strong></p><pre><code>$(&apos;#id&apos;).waformselect({    placeholder: &apos;请选择&apos;,    layerUrl: top.$.rootUrl + &apos;/WA_SystemModule/DataSource/SelectForm&apos;,    layerUrlH: 500,    layerUrlW: 800,    dataUrl: top.$.rootUrl + &apos;/WA_SystemModule/DataSource/GetNameByCode&apos;});</code></pre><h2 id="十二-wayperfectSelect（普通，多选，树形数据，gird，搜索，输入框选择器）"><a href="#十二-wayperfectSelect（普通，多选，树形数据，gird，搜索，输入框选择器）" class="headerlink" title="十二.wayperfectSelect（普通，多选，树形数据，gird，搜索，输入框选择器）"></a>十二.wayperfectSelect（普通，多选，树形数据，gird，搜索，输入框选择器）</h2><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th><th style="text-align:center">默认</th></tr></thead><tbody><tr><td style="text-align:center">placeholder</td><td style="text-align:center">默认展示字样</td><td style="text-align:center">“请选择”</td></tr><tr><td style="text-align:center">type</td><td style="text-align:center">类型可选[default,tree,treemultiple,gird,multiple]</td><td style="text-align:center">default</td></tr><tr><td style="text-align:center">maxHeight</td><td style="text-align:center">展开最大高度</td><td style="text-align:center">200</td></tr><tr><td style="text-align:center">width</td><td style="text-align:center">宽度</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">allowSearch</td><td style="text-align:center">是否允许搜索</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">url</td><td style="text-align:center">数据接口</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">data</td><td style="text-align:center">数据集</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">param</td><td style="text-align:center">访问数据接口参数</td><td style="text-align:center">null</td></tr><tr><td style="text-align:center">method</td><td style="text-align:center">接口请求的方法</td><td style="text-align:center">“GET”</td></tr><tr><td style="text-align:center">select</td><td style="text-align:center">选择事件</td><td style="text-align:center">false</td></tr></tbody></table><p><strong>data数据格式(数组)</strong></p><pre><code>[{    value:1,    text:&quot;text&quot;,    name:&quot;xxx&quot;    .    .    .}]</code></pre><p>拓展了3个方法：waselectRefresh，waselectGet，waselectSet</p><h2 id="十三-wa-uploader-表单附件选择插件"><a href="#十三-wa-uploader-表单附件选择插件" class="headerlink" title="十三.wa-uploader 表单附件选择插件"></a>十三.wa-uploader 表单附件选择插件</h2><p><strong>代码示例：</strong></p><pre><code>&lt;div id=&quot;id&quot;&gt;&lt;/div&gt;$(&quot;#id&quot;).waUploader()</code></pre><h2 id="十四-UE富文本编辑器"><a href="#十四-UE富文本编辑器" class="headerlink" title="十四.UE富文本编辑器"></a>十四.UE富文本编辑器</h2><p>引入ueditor.config.js、ueditor.all.js、zh-cn.js等js文件</p><pre><code>&lt;script id=&quot;editor&quot; type=&quot;text/plain&quot; style=&quot;height:270px;&quot;&gt;&lt;/script&gt;</code></pre><h2 id="时间轴方法（降序）"><a href="#时间轴方法（降序）" class="headerlink" title="时间轴方法（降序）"></a>时间轴方法（降序）</h2><h2 id="自定义表单（custmerform）"><a href="#自定义表单（custmerform）" class="headerlink" title="自定义表单（custmerform）"></a>自定义表单（custmerform）</h2><h2 id="自定义查询（custmerquery）"><a href="#自定义查询（custmerquery）" class="headerlink" title="自定义查询（custmerquery）"></a>自定义查询（custmerquery）</h2><h2 id="即时聊天-系统内部通讯"><a href="#即时聊天-系统内部通讯" class="headerlink" title="即时聊天-系统内部通讯"></a>即时聊天-系统内部通讯</h2><h2 id="waLayout-页面布局插件（目前支持左右布局）"><a href="#waLayout-页面布局插件（目前支持左右布局）" class="headerlink" title="waLayout 页面布局插件（目前支持左右布局）"></a>waLayout 页面布局插件（目前支持左右布局）</h2><h2 id="工作流引擎api操作方法类"><a href="#工作流引擎api操作方法类" class="headerlink" title="工作流引擎api操作方法类"></a>工作流引擎api操作方法类</h2><h2 id="工作流绘制组件"><a href="#工作流绘制组件" class="headerlink" title="工作流绘制组件"></a>工作流绘制组件</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我看到的力软敏捷开发框架的文档写的相当简洁，且只有部分组件的文档。为了以后加入的伙伴能更快的上手，也为了自己提升开发效率，于是对着源代码写了下面的文档，由于项目需要，部分组件进行了细微修改，另外由于其他原因，所有组件名都更改为waxxx字样。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://images.pexels.com/photos/2089379/pexels-photo-2089379.jpeg?auto=compress&amp;amp;cs=tinysrgb&amp;amp;dpr=1&amp;amp;w=500&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;h2 id=&quot;一-时间查询框&quot;&gt;&lt;a href=&quot;#一-时间查询框&quot; class=&quot;headerlink&quot; title=&quot;一.时间查询框&quot;&gt;&lt;/a&gt;一.时间查询框&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;方法：$(‘#id’).wadate(op);&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="力软敏捷开发6.0" scheme="https://9240.github.io/tags/%E5%8A%9B%E8%BD%AF%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%916-0/"/>
    
  </entry>
  
  <entry>
    <title>mongodb基本操作</title>
    <link href="https://9240.github.io/2018/12/25/mongodb/"/>
    <id>https://9240.github.io/2018/12/25/mongodb/</id>
    <published>2018-12-24T16:00:00.000Z</published>
    <updated>2019-04-30T05:45:40.491Z</updated>
    
    <content type="html"><![CDATA[<p>不知不觉已经在这家公司实习了4个多月，大三暑假加入找工作的大军，自己运气好，七月十六号正式在所在公司上班，因为初入职场，面对真实的项目，而自己精力有限，所以这博客也好久没有更新了，最近PC端，移动端都完成了大的改造，自己也面临着毕设，所以抽点时间学习一下mongodb。以下做一些简单的学习记录。</p><p><center><img src="https://images.pexels.com/photos/875858/pexels-photo-875858.png?auto=compress&amp;cs=tinysrgb&amp;dpr=1&amp;w=500" alt=""></center></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1.下载安装"></a>1.下载安装</h3><p><a href="https://9240.github.io" title="mongodb官网">下载mongodb</a>，下载完，找到文件，双击，一路回车即可完成安装。</p><h3 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h3><p>复制mongodb安装的bin目录到系统变量path中。<br><a id="more"></a></p><h3 id="3-启动mongodb服务端"><a href="#3-启动mongodb服务端" class="headerlink" title="3.启动mongodb服务端"></a>3.启动mongodb服务端</h3><p>新建数据存储文件夹，执行命令行mongod –dbpath 文件夹，出现下图即服务端启动成功。</p><p><center><img src="https://9240.github.io/myblogpic/img/mongodb1.png" alt=""></center></p><h3 id="4-启动mongodb客户端"><a href="#4-启动mongodb客户端" class="headerlink" title="4.启动mongodb客户端"></a>4.启动mongodb客户端</h3><p>执行命令行mongo（mongo 127.0.0.1:27017）,出现下图即客户端启动成功。</p><p><center><img src="https://9240.github.io/myblogpic/img/mongodb2.png" alt=""></center></p><h3 id="5-准备工作做完，下面就可以愉快的敲代码了。"><a href="#5-准备工作做完，下面就可以愉快的敲代码了。" class="headerlink" title="5.准备工作做完，下面就可以愉快的敲代码了。"></a>5.准备工作做完，下面就可以愉快的敲代码了。</h3><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><h4 id="1-简单命令"><a href="#1-简单命令" class="headerlink" title="1.简单命令"></a>1.简单命令</h4><p>查看所有数据库列表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ show dbs</span><br></pre></td></tr></table></figure></p><p>查看当前数据库的集合<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ show collections</span><br></pre></td></tr></table></figure></p><p>使用数据库/创建数据库(创建操作时，需要往collections里插入数据才能创建成功)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ use dbname</span><br></pre></td></tr></table></figure></p><p>数据库集合中插入数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.collectionsname.insert(&#123;<span class="string">"name"</span>:<span class="string">"zhangsan"</span>,<span class="string">"age"</span>:21&#125;)</span><br></pre></td></tr></table></figure></p><p>查看数据库集合<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ show collections</span><br></pre></td></tr></table></figure></p><p>删除当前所在数据库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.dropDatabase()</span><br></pre></td></tr></table></figure></p><p>删除指定集合<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.collectionsname.drop()</span><br></pre></td></tr></table></figure></p><h4 id="2-数据查找"><a href="#2-数据查找" class="headerlink" title="2.数据查找"></a>2.数据查找</h4><p>1.查找指定集合（userinfo）中所有数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find()</span><br></pre></td></tr></table></figure></p><p>2.查询去掉后的当前聚集集合中的某列的重复数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.distinct(<span class="string">"name"</span>)</span><br></pre></td></tr></table></figure></p><p>3.查询 age = 22 的记录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userinfo.find(&#123;<span class="string">"age"</span>:22&#125;)</span><br></pre></td></tr></table></figure></p><p>4.查询 age &gt; 22 的记录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find(&#123;age: &#123;<span class="variable">$gt</span>: 22&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>5.查询 age &lt; 22 的记录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find(&#123;age: &#123;<span class="variable">$lt</span>: 22&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>6.查询 age &gt;= 25 的记录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find(&#123;age: &#123;<span class="variable">$gte</span>: 25&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>7.查询 age &lt;= 25 的记录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find(&#123;age: &#123;<span class="variable">$lte</span>: 25&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>8.查询 age &gt;= 23 并且 age &lt;= 26<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find(&#123;age: &#123;<span class="variable">$gte</span>: 23, <span class="variable">$lte</span>: 26&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>9.查询 name 中包含 mongo 的数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find(&#123;name: /mongo/&#125;)</span><br></pre></td></tr></table></figure></p><p>10.查询 name 中以 mongo 开头的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find(&#123;name: /^mongo/&#125;)</span><br></pre></td></tr></table></figure></p><p>11.查询指定列 name、age 数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find(&#123;&#125;, &#123;name: 1, age: 1&#125;)</span><br></pre></td></tr></table></figure></p><p>12.查询指定列 name、age 数据, age &gt; 25<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find(&#123;age: &#123;<span class="variable">$gt</span>: 25&#125;&#125;, &#123;name: 1, age: 1&#125;)</span><br></pre></td></tr></table></figure></p><p>13.按照年龄排序 1 升序 -1 降序<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find().sort(&#123;age: 1&#125;)</span><br></pre></td></tr></table></figure></p><p>14.查询 name = zhangsan, age = 22 的数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find(&#123;name: <span class="string">'zhangsan'</span>, age: 22&#125;)</span><br></pre></td></tr></table></figure></p><p>15.查询前 5 条数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find().<span class="built_in">limit</span>(5)</span><br></pre></td></tr></table></figure></p><p>16.查询 10 条以后的数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find().skip(10)</span><br></pre></td></tr></table></figure></p><p>17.查询在 5-10 之间的数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find().<span class="built_in">limit</span>(10).skip(5)</span><br></pre></td></tr></table></figure></p><p>18.or 与 查询<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find(&#123;<span class="variable">$or</span>: [&#123;age: 22&#125;, &#123;age: 25&#125;]&#125;)</span><br></pre></td></tr></table></figure></p><p>19.findOne 查询第一条数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.findOne()</span><br></pre></td></tr></table></figure></p><p>20.查询某个结果集的记录条数 统计数量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find(&#123;age: &#123;<span class="variable">$gte</span>: 25&#125;&#125;).count()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知不觉已经在这家公司实习了4个多月，大三暑假加入找工作的大军，自己运气好，七月十六号正式在所在公司上班，因为初入职场，面对真实的项目，而自己精力有限，所以这博客也好久没有更新了，最近PC端，移动端都完成了大的改造，自己也面临着毕设，所以抽点时间学习一下mongodb。以下做一些简单的学习记录。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src=&quot;https://images.pexels.com/photos/875858/pexels-photo-875858.png?auto=compress&amp;amp;cs=tinysrgb&amp;amp;dpr=1&amp;amp;w=500&quot; alt=&quot;&quot;&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;h3 id=&quot;1-下载安装&quot;&gt;&lt;a href=&quot;#1-下载安装&quot; class=&quot;headerlink&quot; title=&quot;1.下载安装&quot;&gt;&lt;/a&gt;1.下载安装&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://9240.github.io&quot; title=&quot;mongodb官网&quot;&gt;下载mongodb&lt;/a&gt;，下载完，找到文件，双击，一路回车即可完成安装。&lt;/p&gt;
&lt;h3 id=&quot;2-配置环境变量&quot;&gt;&lt;a href=&quot;#2-配置环境变量&quot; class=&quot;headerlink&quot; title=&quot;2.配置环境变量&quot;&gt;&lt;/a&gt;2.配置环境变量&lt;/h3&gt;&lt;p&gt;复制mongodb安装的bin目录到系统变量path中。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="mongodb" scheme="https://9240.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>gitbook简单使用</title>
    <link href="https://9240.github.io/2018/12/05/gitbook/"/>
    <id>https://9240.github.io/2018/12/05/gitbook/</id>
    <published>2018-12-04T16:00:00.000Z</published>
    <updated>2019-04-30T05:45:18.695Z</updated>
    
    <content type="html"><![CDATA[<p><center><img src="https://images.pexels.com/photos/733857/pexels-photo-733857.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=1&amp;w=500" alt=""></center></p><h2 id="gitbook简单介绍"><a href="#gitbook简单介绍" class="headerlink" title="gitbook简单介绍"></a>gitbook简单介绍</h2><p>gitbook是静态网页生成器，使用markdown语法。在2014年中发布第一个开源版本，在github上有20257个Star，他给自己的定位:现代而优雅，易于编辑，专为团队而建，智能见解，各种插件扩展GitBook。</p><h2 id="gitbook简单使用"><a href="#gitbook简单使用" class="headerlink" title="gitbook简单使用"></a>gitbook简单使用</h2><h3 id="1-在线编辑"><a href="#1-在线编辑" class="headerlink" title="1.在线编辑"></a>1.在线编辑</h3><p>1.登录之后，在spaces面板点击+Create a new space,输入项目名，title，logo等信息。<br>2.创建成功后，在spaces面板会出现刚刚创建的spaces，单击进去后，点击页面右下角的编辑图标即可编辑整个页面。<br>3.编辑完成后，单击页面右下角的保存图标。访问[username].gitbook.io/[projectname]即可。</p><h3 id="2-本地编辑"><a href="#2-本地编辑" class="headerlink" title="2.本地编辑"></a>2.本地编辑</h3><a id="more"></a><h4 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h4><p>1.下载安装node.js,链接：<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a><br>2.打开终端，任意目录下运行npm install gitbook-cli -g,全局安装gitbook脚手架。<br>3.新建一个文件夹，终端切换到该文件夹，运行gitbook init,初始化项目，会生成README.md(一个页面)和SUMMARY.md(目录文件)。<br>4.运行gitbook serve,然后访问localhost:4000/即可预览。</p><h4 id="添加文章"><a href="#添加文章" class="headerlink" title="添加文章"></a>添加文章</h4><p>1.项目根目录下，新建.md文件并编写内容。<br>2.在SUMMARY.md文件中添加第一步中新建文章的链接。<br>3.在终端中运行gitbook serve启动项目，访问localhost:4000/即可。</p><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>1.服务器上下载安装node.js,链接：<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a><br>2.服务器上打开终端，任意目录下运行npm install gitbook-cli -g,全局安装gitbook脚手架。<br>3.开启服务器4000端口。<br>4.把本地项目文件拷到服务器。<br>5.服务器终端运行gitbook serve，并常驻后台。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>1.<a href="https://9240.fun:4000" target="_blank" rel="noopener">9240.fun:4000</a><br>2.<a href="https://github.com/9240/gitBook.git" target="_blank" rel="noopener">代码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;img src=&quot;https://images.pexels.com/photos/733857/pexels-photo-733857.jpeg?auto=compress&amp;amp;cs=tinysrgb&amp;amp;dpr=1&amp;amp;w=500&quot; alt=&quot;&quot;&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&quot;gitbook简单介绍&quot;&gt;&lt;a href=&quot;#gitbook简单介绍&quot; class=&quot;headerlink&quot; title=&quot;gitbook简单介绍&quot;&gt;&lt;/a&gt;gitbook简单介绍&lt;/h2&gt;&lt;p&gt;gitbook是静态网页生成器，使用markdown语法。在2014年中发布第一个开源版本，在github上有20257个Star，他给自己的定位:现代而优雅，易于编辑，专为团队而建，智能见解，各种插件扩展GitBook。&lt;/p&gt;
&lt;h2 id=&quot;gitbook简单使用&quot;&gt;&lt;a href=&quot;#gitbook简单使用&quot; class=&quot;headerlink&quot; title=&quot;gitbook简单使用&quot;&gt;&lt;/a&gt;gitbook简单使用&lt;/h2&gt;&lt;h3 id=&quot;1-在线编辑&quot;&gt;&lt;a href=&quot;#1-在线编辑&quot; class=&quot;headerlink&quot; title=&quot;1.在线编辑&quot;&gt;&lt;/a&gt;1.在线编辑&lt;/h3&gt;&lt;p&gt;1.登录之后，在spaces面板点击+Create a new space,输入项目名，title，logo等信息。&lt;br&gt;2.创建成功后，在spaces面板会出现刚刚创建的spaces，单击进去后，点击页面右下角的编辑图标即可编辑整个页面。&lt;br&gt;3.编辑完成后，单击页面右下角的保存图标。访问[username].gitbook.io/[projectname]即可。&lt;/p&gt;
&lt;h3 id=&quot;2-本地编辑&quot;&gt;&lt;a href=&quot;#2-本地编辑&quot; class=&quot;headerlink&quot; title=&quot;2.本地编辑&quot;&gt;&lt;/a&gt;2.本地编辑&lt;/h3&gt;
    
    </summary>
    
    
      <category term="gitbook" scheme="https://9240.github.io/tags/gitbook/"/>
    
  </entry>
  
  <entry>
    <title>vue传值</title>
    <link href="https://9240.github.io/2018/06/03/vue%E4%BC%A0%E5%80%BC/"/>
    <id>https://9240.github.io/2018/06/03/vue传值/</id>
    <published>2018-06-02T16:00:00.000Z</published>
    <updated>2019-04-30T05:43:39.691Z</updated>
    
    <content type="html"><![CDATA[<p><center><img src="https://images.pexels.com/photos/442600/pexels-photo-442600.jpeg?auto=compress&amp;cs=tinysrgb&amp;h=350" alt=""></center></p><h3 id="1-父组件向子组件传值-props"><a href="#1-父组件向子组件传值-props" class="headerlink" title="1. 父组件向子组件传值 (props)"></a>1. 父组件向子组件传值 (props)</h3><a id="more"></a><p>父组件</p><pre><code>&lt;template&gt;    &lt;nav id=&quot;navbar&quot;&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;router-link to=&apos;/child&apos; v-bind:message=&quot;title&quot;&gt;render函数&lt;/router-link&gt;            &lt;/li&gt;        &lt;/ul&gt;    &lt;/nav&gt;&lt;/template&gt;&lt;script&gt;    export default{        data(){            return {                title:&apos;传到子组件的值&apos;            }        }    }&lt;/script&gt;</code></pre><p>子组件</p><pre><code>&lt;template&gt;  &lt;div id=&quot;propsvalue&quot;&gt;     {{msg}}  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default { props:{   msg:{     type:String,     default:&quot;我是默认值&quot;   } }}&lt;/script&gt;</code></pre><h3 id="2-子组件向父组件传值-emit"><a href="#2-子组件向父组件传值-emit" class="headerlink" title="2. 子组件向父组件传值($emit)"></a>2. 子组件向父组件传值($emit)</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;app&quot;&gt;        &lt;h2 ref=&apos;mytitle&apos;&gt;{{msg}}&lt;/h2&gt;        &lt;child v-on:getchild=&apos;content&apos; v-bind:list=&apos;list&apos;&gt;&lt;/child&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;&lt;script&gt;    new Vue({        el:&apos;#app&apos;,        data(){            return{                msg:&apos;hello word&apos;            }        },        methods:{            content(str){                this.$refs.mytitle.innerHTML = str;            }        },        //子组件        components:{            &apos;child&apos;:{                data(){                    return{                        list:[&apos;第一项&apos;,&apos;第二项&apos;,&apos;第三项&apos;],                        childmsg:&apos;子组件的内容&apos;                    }                },                template:`                    &lt;div&gt;                        &lt;ul&gt;                            &lt;li v-for=&quot;(item,index) in list&quot; v-on:click=&apos;change&apos;&gt;{{item}}&lt;/li&gt;                        &lt;/ul&gt;                    &lt;/div&gt;                `,                methods:{                    change(e){                        this.$emit(&apos;getchild&apos;,e.target.innerText)                    }                }            }        }    })&lt;/script&gt;</code></pre><h3 id="3-非父子组件的传值-vue空实例"><a href="#3-非父子组件的传值-vue空实例" class="headerlink" title="3. 非父子组件的传值(vue空实例)"></a>3. 非父子组件的传值(vue空实例)</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;app&quot;&gt;        &lt;theheader&gt;&lt;/theheader&gt;        &lt;thelist&gt;&lt;/thelist&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;&lt;script&gt;    //vue空实例作为中间传达的工具    var vm = new Vue();    new Vue({        el:&apos;#app&apos;,        components:{            &apos;theheader&apos;:{                data(){                    return{                        msg:&apos;组件一&apos;                    }                },                template:`                    &lt;div&gt;                        &lt;h2&gt;{{msg}}&lt;/h2&gt;                    &lt;/div&gt;                `,                mounted(){                    //$on接收                    vm.$on(&apos;change&apos;,(str)=&gt;{                        this.msg = str                    })                }            },            &apos;thelist&apos;:{                data(){                    return{                        list:[&apos;第一项&apos;,&apos;第二项&apos;,&apos;第三项&apos;]                    }                },                template:`                    &lt;div&gt;                        &lt;ul&gt;                            &lt;li v-for=&quot;(item,index) in list&quot; v-on:click=&apos;getcontent&apos;&gt;{{item}}&lt;/li&gt;                        &lt;/ul&gt;                    &lt;/div&gt;                `,                methods:{                    getcontent(e){                        //$emit发布                        vm.$emit(&apos;change&apos;,e.target.innerHTML)                    }                }            }        }    })&lt;/script&gt;</code></pre><h3 id="当然，还有更好用的方式，使用vuex插件。"><a href="#当然，还有更好用的方式，使用vuex插件。" class="headerlink" title="当然，还有更好用的方式，使用vuex插件。"></a>当然，还有更好用的方式，使用vuex插件。</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;img src=&quot;https://images.pexels.com/photos/442600/pexels-photo-442600.jpeg?auto=compress&amp;amp;cs=tinysrgb&amp;amp;h=350&quot; alt=&quot;&quot;&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-父组件向子组件传值-props&quot;&gt;&lt;a href=&quot;#1-父组件向子组件传值-props&quot; class=&quot;headerlink&quot; title=&quot;1. 父组件向子组件传值 (props)&quot;&gt;&lt;/a&gt;1. 父组件向子组件传值 (props)&lt;/h3&gt;
    
    </summary>
    
    
      <category term="vue" scheme="https://9240.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue生命周期</title>
    <link href="https://9240.github.io/2018/06/01/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://9240.github.io/2018/06/01/vue生命周期/</id>
    <published>2018-05-31T16:00:00.000Z</published>
    <updated>2019-04-30T05:45:09.366Z</updated>
    
    <content type="html"><![CDATA[<p>下图是Vue文档里关于实例生命周期的解释图</p><p><center><img src="https://cn.vuejs.org/images/lifecycle.png" height="50%" width="50%"></center></p><h3 id="先贴代码"><a href="#先贴代码" class="headerlink" title="先贴代码"></a>先贴代码</h3><a id="more"></a><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;h2&gt;{{msg}}&lt;/h2&gt;    &lt;button @click=&quot;changemsg&quot;&gt;更新&lt;/button&gt;&lt;/div&gt;&lt;script&gt;    new Vue({        el:&apos;#app&apos;,        data(){            return{                msg:&apos;vue生命周期&apos;            }        },        methods:{            changemsg(){                this.msg = &apos;我更新了&apos;            }        },        beforeCreate(){            console.log(`msg: ${this.msg}, el: ${this.$el}`)            alert(&quot;beforeCreate&quot;)        },        created(){            console.log(`msg: ${this.msg}, el: ${this.$el}`)            alert(&quot;created&quot;)        },        beforeMount(){            console.log(`msg: ${this.msg}, el: ${this.$el}`)            alert(&quot;beforeMount&quot;)        },        mounted(){            console.log(`msg: ${this.msg}, el: ${this.$el}`)            alert(&quot;mounted&quot;)        },        beforeUpdate(){            console.log(`msg: ${this.msg}, el: ${this.$el}`)            alert(&quot;beforeUpdate&quot;)        },        updated(){            console.log(`msg: ${this.msg}, el: ${this.$el}`)            alert(&quot;updated&quot;)        },        beforeDestroy(){            console.log(`msg: ${this.msg}, el: ${this.$el}`)            alert(&quot;beforeDestroy&quot;)        },        destroyed(){            console.log(`msg: ${this.msg}, el: ${this.$el}`)            alert(&quot;destroyed&quot;)        }    })&lt;/script&gt;</code></pre><ol><li><strong>beforeCreate：组件实例化之前执行,data和$el都是undefined</strong><br><center><img src="https://9240.github.io/myblogpic/img/beforeCreate.png" alt=""></center><br><br></li><li><strong>created：组件实例化完毕，但页面还未显示，data可以被访问</strong><br><center><img src="https://9240.github.io/myblogpic/img/created.png" alt=""></center><br><br></li><li><strong>beforeMount：组件挂载前，页面仍未展示，但虚拟DOM已经配置</strong><br><center><img src="https://9240.github.io/myblogpic/img/beforeMount.png" alt=""></center><br><br></li><li><strong>mounted：组件挂载后，此方法执行后，页面显示</strong><br><center><img src="https://9240.github.io/myblogpic/img/mounted1.png" alt=""></center><br><center><img src="https://9240.github.io/myblogpic/img/mounted2.png" alt=""></center><br><br></li><li><strong>beforeUpdate：组件更新前，页面仍未更新，但虚拟DOM已经配置</strong><br><center><img src="https://9240.github.io/myblogpic/img/beforeUpdate.png" alt=""></center><br><br></li><li><strong>update：组件更新，此方法执行后，页面显示</strong><br><center><img src="https://9240.github.io/myblogpic/img/updated1.png" alt=""></center><br><center><img src="https://9240.github.io/myblogpic/img/updated2.png" alt=""></center><br><br></li><li><strong>beforeDestory：组件销毁前</strong></li><li><strong>destoryed：组件销毁</strong></li></ol><p>总结：vue实例从创建到销毁住哟有8个阶段。创建前、创建后、渲染前、选然后、更新前、更新后、销毁前、销毁后。<br>使用new Vue()创建vue的实例，然后调用Init()函数初始化对象信息；在渲染前会检查el属性，如果没有就调用$mount(el)方法；然后检查是否有template属性，如果有就编译template的内容进行渲染，如果没有，就编译el指定的节点内容进行渲染。然后创建虚拟DOM $el对象，并用替换挂载节点的内容渲染到试图上。在渲染后和更新后就可以进行dom操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下图是Vue文档里关于实例生命周期的解释图&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src=&quot;https://cn.vuejs.org/images/lifecycle.png&quot; height=&quot;50%&quot; width=&quot;50%&quot;&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3 id=&quot;先贴代码&quot;&gt;&lt;a href=&quot;#先贴代码&quot; class=&quot;headerlink&quot; title=&quot;先贴代码&quot;&gt;&lt;/a&gt;先贴代码&lt;/h3&gt;
    
    </summary>
    
    
      <category term="vue" scheme="https://9240.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>github pages+hexo搭建个人博客</title>
    <link href="https://9240.github.io/2018/05/30/github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://9240.github.io/2018/05/30/github-pages-hexo搭建个人博客/</id>
    <published>2018-05-30T11:52:17.000Z</published>
    <updated>2018-09-21T12:04:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>我在学习了git命令后，自然而然的学习了github，然后得知github pages+hexo可以搭建个人博客后，于是在网上搜了一些教程，费劲千辛万苦，踩了N多坑，终于搭建成功了，效果就是你现在看到的这个样子。由于这种教程网上很多，我就简短的分享一下步骤及我的爬坑经历。</p><p><center><img src="https://9240.github.io/myblogpic/img/0530.jpeg" alt=""></center></p><h2 id="步骤如下"><a href="#步骤如下" class="headerlink" title="步骤如下"></a>步骤如下</h2><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><p>电脑上装好Nodejs , Git , github账号（电脑中已有SSH KEYS）</p><p>Hexo 安装命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="2-本地搭建"><a href="#2-本地搭建" class="headerlink" title="2. 本地搭建"></a>2. 本地搭建</h3><p>使用Hexo建站，进入新建文件夹（站点根目录），右键选择Git bash，输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></p><p>该命令会在目标文件夹内建立网站所需要的所有文件。接下来是安装依赖包：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><p>到此，本地Hexo博客已经搭好了，浏览器输入localhost:4000可查看查看。</p><h3 id="3-部署到github"><a href="#3-部署到github" class="headerlink" title="3. 部署到github"></a>3. 部署到github</h3><ol><li>在自己的GitHub账号下创建一个新的仓库，命名为username.github.io （<strong>注意：username是你的账号名</strong>）</li><li>配置SSH KEYS,如果没有就添加一个</li><li>测试，输入如下命名<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure></li></ol><p>如果是下面的反馈：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">'github.com (207.97.227.239)'</span> can<span class="string">'t be established.RSA key fingerprint is16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure></p><p>输入<strong>yes</strong>就好，然后会看到：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi 9240! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure></p><p>设置用户信息，输入如下命名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"张三"</span>//张三替换为自己的真名</span><br><span class="line">$ git config --global user.email  <span class="string">"zhangsan@qq.com"</span>//填写自己的邮箱</span><br></pre></td></tr></table></figure></p><h3 id="4-本地的博客更新到GitHub的库中"><a href="#4-本地的博客更新到GitHub的库中" class="headerlink" title="4. 本地的博客更新到GitHub的库中"></a>4. 本地的博客更新到GitHub的库中</h3><ol><li>找到username.github.io项目，复制链接</li><li>用vim命令打开站点根目录下的_config.yml文件，作如下修改<br>deploy:<br>　　type： git<br>　　repository： <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:张三/张三.github.io.git(这就是4.1中复制的链接)<br>　　branch： master</li><li>进入站点文件夹执行如下命名<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></li></ol><p>执行结束前会让你输入github密码，之后就可以访问https://张三.github.io 看到你的博客了，在别人电脑上也可以哦。</p><h3 id="5-爬坑"><a href="#5-爬坑" class="headerlink" title="5. 爬坑"></a>5. 爬坑</h3><h5 id="1-ssh-T-git-github-com"><a href="#1-ssh-T-git-github-com" class="headerlink" title="1. ssh -T git@github.com"></a>1. ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>输出为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi 9240! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure></p><p>由于之前看的教程里面没有这个，后面半句话然我又重新折腾了一遍，这一次又是这种结果，然后就搜索这句话，然来直接执行如下命令即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"张三"</span>//张三替换为自己的真名</span><br><span class="line">$ git config --global user.email  <span class="string">"zhangsan@qq.com"</span>//填写自己的邮箱</span><br></pre></td></tr></table></figure></p><h5 id="2-个人图像问题"><a href="#2-个人图像问题" class="headerlink" title="2. 个人图像问题"></a>2. 个人图像问题</h5><p>如果用本地图片路径为 ./img/xxx.jpg只有在主页图像才会显示,进入到其中一条博客就会找不到，如果路径为 ../../../../../img/xxx.jpg ，那么主页的图像又不能显示,所以我在github pages上又部署了另一种类型的静态网页存放博客上的图片</p><h5 id="3-“所有文章”页面不能搜索"><a href="#3-“所有文章”页面不能搜索" class="headerlink" title="3. “所有文章”页面不能搜索"></a>3. “所有文章”页面不能搜索</h5><p>Yilia（没用其他的主题）主题下点击”所有文章”，提示需要安装一个模块并在Yilia文件夹下的_config.yml文件中加入一些配置（照着他说的做就好了）</p><h5 id="4-Yilia主题下，”关于我”页面在”友链”下面显示问题"><a href="#4-Yilia主题下，”关于我”页面在”友链”下面显示问题" class="headerlink" title="4. Yilia主题下，”关于我”页面在”友链”下面显示问题"></a>4. Yilia主题下，”关于我”页面在”友链”下面显示问题</h5><p>vim 命令进入Yilia主题下的_config.yml文件，找到最好一行<strong>aboutme： xxx</strong>，把前面的缩进删除后，就会在<strong>关于我</strong>显示</p><h5 id="5-Yilia主题下，博客内容展开问题"><a href="#5-Yilia主题下，博客内容展开问题" class="headerlink" title="5. Yilia主题下，博客内容展开问题"></a>5. Yilia主题下，博客内容展开问题</h5><p>在需要折叠的地方加上如下内容即可：</p><pre><code>&lt;!--more--&gt;</code></pre><h5 id="6-vim修改配置"><a href="#6-vim修改配置" class="headerlink" title="6. vim修改配置"></a>6. vim修改配置</h5><p>修改配置的时候，在”:”后面一定要敲一个空格。另外本教程涉及的vim命令如下：</p><ol><li>vim 文件名——打开文件eg：vim _config.yml</li><li>i ：进入编辑模式</li><li>Esc退出编辑模式</li><li>:wq保存并退出</li><li>:q!不保存并退出<br>教程到此就结束了(第一次使用这东西，慢慢摸索)</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我在学习了git命令后，自然而然的学习了github，然后得知github pages+hexo可以搭建个人博客后，于是在网上搜了一些教程，费劲千辛万苦，踩了N多坑，终于搭建成功了，效果就是你现在看到的这个样子。由于这种教程网上很多，我就简短的分享一下步骤及我的爬坑经历。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src=&quot;https://9240.github.io/myblogpic/img/0530.jpeg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&quot;步骤如下&quot;&gt;&lt;a href=&quot;#步骤如下&quot; class=&quot;headerlink&quot; title=&quot;步骤如下&quot;&gt;&lt;/a&gt;步骤如下&lt;/h2&gt;&lt;h3 id=&quot;1-准备工作&quot;&gt;&lt;a href=&quot;#1-准备工作&quot; class=&quot;headerlink&quot; title=&quot;1. 准备工作&quot;&gt;&lt;/a&gt;1. 准备工作&lt;/h3&gt;&lt;p&gt;电脑上装好Nodejs , Git , github账号（电脑中已有SSH KEYS）&lt;/p&gt;
&lt;p&gt;Hexo 安装命令&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install -g hexo-cli&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="github" scheme="https://9240.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://9240.github.io/2018/05/29/hello-world/"/>
    <id>https://9240.github.io/2018/05/29/hello-world/</id>
    <published>2018-05-28T16:00:00.000Z</published>
    <updated>2019-04-30T05:44:22.322Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://9240.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
