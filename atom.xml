<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>郑维维个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://9240.github.io/"/>
  <updated>2020-05-31T05:12:53.819Z</updated>
  <id>https://9240.github.io/</id>
  
  <author>
    <name>郑维维</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>隐藏滚动条</title>
    <link href="https://9240.github.io/2020/05/31/%E9%9A%90%E8%97%8F%E6%BB%9A%E5%8A%A8%E6%9D%A1/"/>
    <id>https://9240.github.io/2020/05/31/隐藏滚动条/</id>
    <published>2020-05-31T05:01:32.000Z</published>
    <updated>2020-05-31T05:12:53.819Z</updated>
    
    <content type="html"><![CDATA[<p>兼容 IE10+、Safari、Chrome、火狐等浏览器的隐藏滚动条</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span><span class="selector-pseudo">::-webkit-scrollbar</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none; <span class="comment">/* Safari and Chrome */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">-ms-overflow-style</span>: none; <span class="comment">/* IE10+ */</span></span><br><span class="line">  <span class="attribute">scrollbar-width</span>: none; <span class="comment">/* 火狐(新) */</span></span><br><span class="line">  <span class="attribute">overflow</span>: -moz-scrollbars-none; <span class="comment">/* 火狐(旧) */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;兼容 IE10+、Safari、Chrome、火狐等浏览器的隐藏滚动条&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://9240.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Electron学习</title>
    <link href="https://9240.github.io/2020/03/04/Electron%E5%AD%A6%E4%B9%A0/"/>
    <id>https://9240.github.io/2020/03/04/Electron学习/</id>
    <published>2020-03-03T16:00:00.000Z</published>
    <updated>2020-03-04T08:57:31.702Z</updated>
    
    <content type="html"><![CDATA[<p><center><img src="https://images.pexels.com/photos/1647962/pexels-photo-1647962.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=800" height="50%" width="50%"></center></p><h2 id="app"><a href="#app" class="headerlink" title="app"></a>app</h2><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><ol><li><code>‘will-finish-launching’</code> 当应用程序完成基础的启动的时候被触发。</li><li><code>‘ready’</code> 当 Electron 完成初始化时被触发</li><li><code>‘window-all-closed’</code> 当所有的窗口都被关闭时触发。</li><li><code>‘before-quit’</code> 在应用程序开始关闭窗口之前触发。</li><li><code>‘will-quit’</code> 当所有窗口都已关闭并且应用程序将退出时发出。</li><li><code>‘quit’</code> 在应用程序退出时发出。</li><li><code>‘browser-window-blur’</code> 在 browserWindow 失去焦点时发出。</li><li><code>‘browser-window-focus’</code> 在 browserWindow 获得焦点时发出。</li><li><code>‘browser-window-created’</code> 在创建新的 browserWindow 时发出。</li><li><code>‘web-contents-created’</code> 在创建新的 webContents 时发出。</li><li><code>‘session-created’</code> 当 Electron创建了一个新的 session后被触发.</li><li><code>‘remote-require’</code> 在 webContents 的渲染器进程中调用 remote.require() 时发出</li><li><code>‘remote-get-global’</code> 在 webContents 的渲染器进程中调用 remote.getGlobal() 时发出。<a id="more"></a><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3></li><li><code>app.quit()</code> 关闭所有窗口 将首先发出 before-quit 事件。</li><li><code>app.exit()</code> 立即退出程序并返回</li><li><code>app.relaunch()</code> 从当前实例退出，重启应用。</li><li><code>app.isReady()</code>  Electron是否已经完成初始化,返回true或false</li><li><code>app.whenReady()</code> 当Electron 初始化完成。</li><li><code>app.focus()</code> 在 Windows 上, 使应用的第一个窗口获取焦点。</li><li><code>app.getAppPath()</code> 获取当前应用程序所在目录</li><li><code>app.getVersion()</code> 获取应用程序的版本</li><li><code>app.getName()</code> 获取当前应用程序的名称</li><li><code>app.setName(name)</code> 设置当前应用程序的名称</li><li><code>app.getLocale()</code> 获取应用程序的语言环境</li></ol><h2 id="BrowserView"><a href="#BrowserView" class="headerlink" title="BrowserView"></a>BrowserView</h2><blockquote><p><code>BrowserView</code> 被用来让 <code>BrowserWindow</code> 嵌入更多的 web 内容。 它就像一个子窗口，除了它的位置是相对于父窗口。 这意味着可以替代<code>webview</code>标签.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在主进程中</span></span><br><span class="line"><span class="keyword">const</span> &#123; BrowserView, BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mainWin = <span class="keyword">new</span> BrowserWindow(&#123; <span class="attr">width</span>: <span class="number">800</span>, <span class="attr">height</span>: <span class="number">600</span> &#125;)</span><br><span class="line">mainWin.on(<span class="string">'closed'</span>, () =&gt; &#123;</span><br><span class="line">    mainWin = <span class="literal">null</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> view = <span class="keyword">new</span> BrowserView()</span><br><span class="line">mainWin.setBrowserView(view)</span><br><span class="line">view.setBounds(&#123; <span class="attr">id</span>:<span class="number">1</span>, <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>, <span class="attr">width</span>: <span class="number">300</span>, <span class="attr">height</span>: <span class="number">300</span> &#125;)</span><br><span class="line">view.webContents.loadURL(<span class="string">'https://github.com'</span>)</span><br></pre></td></tr></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BrowserView.getAllViews() <span class="comment">//返回所有打开的BrowserView的数组</span></span><br><span class="line">BrowserView.fromId(<span class="number">1</span>) <span class="comment">//返回id为1的BrowserView</span></span><br><span class="line">BrowserView.fromWebContents(BrowserView.fromId(<span class="number">1</span>).webContents) <span class="comment">//返回webContents为BrowserView.fromId(1).webContents的BrowserView</span></span><br></pre></td></tr></table></figure><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">browserView.destroy() <span class="comment">// 强制关闭视图</span></span><br><span class="line">browserView.isDestroyed() <span class="comment">// 判断browserView是否被销毁</span></span><br></pre></td></tr></table></figure><h2 id="BrowserWindow"><a href="#BrowserWindow" class="headerlink" title="BrowserWindow"></a>BrowserWindow</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在主进程中.</span></span><br><span class="line"><span class="keyword">const</span> &#123; BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">800</span>,</span><br><span class="line">    height: <span class="number">600</span>,</span><br><span class="line">    x: <span class="number">100</span>,</span><br><span class="line">    y: <span class="number">100</span>,</span><br><span class="line">    minWidth:<span class="number">200</span>,</span><br><span class="line">    minHeight:<span class="number">400</span>,</span><br><span class="line">    resizable:<span class="literal">true</span>,</span><br><span class="line">    movable:<span class="literal">true</span>,</span><br><span class="line">    minimizable:<span class="literal">true</span>,</span><br><span class="line">    maximizable:<span class="literal">true</span>,</span><br><span class="line">    closable:<span class="literal">true</span>,</span><br><span class="line">    focusable:<span class="literal">true</span>,</span><br><span class="line">    fullscreenable:<span class="literal">false</span>,</span><br><span class="line">    title:<span class="string">'标题'</span>,</span><br><span class="line">    show:<span class="literal">false</span>,</span><br><span class="line">    frame:<span class="literal">true</span>,</span><br><span class="line">    parent:<span class="literal">null</span>,</span><br><span class="line">    modal:<span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line">win.on(<span class="string">'closed'</span>, () =&gt; &#123;</span><br><span class="line">  win = <span class="literal">null</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载远程URL</span></span><br><span class="line">win.loadURL(<span class="string">'https://github.com'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或加载本地HTML文件</span></span><br><span class="line">win.loadURL(<span class="string">`file://<span class="subst">$&#123;__dirname&#125;</span>/app/index.html`</span>)</span><br></pre></td></tr></table></figure><h3 id="选项-Object-可选"><a href="#选项-Object-可选" class="headerlink" title="选项 Object (可选)"></a><strong><code>选项</code> Object (可选)</strong></h3><ol><li><code>width</code> Integer (可选) - 窗口的宽度，单位为像素。默认为800</li><li><code>height</code> Integer(可选) - 窗口的高度，单位为像素。默认为600</li><li><code>x</code>Integer (optional) - (required if y is used) Window’s left offset from screen. Default is to center the window</li><li><code>y</code>Integer (optional) - (required if x is used) Window’s top offset from screen. Default is to center the window</li><li><code>useContentSize</code> Boolean (可选) - width 和 height 将设置为 web 页面的尺寸(译注: 不包含边框)</li><li><code>center </code> Boolean(可选) - 窗口在屏幕居中</li><li><code>minWidth</code> Integer (可选) - 窗口的最小宽度, 默认值为 0</li><li><code>minHeight</code> Integer (可选) - 窗口的最小高度. 默认值为 0</li><li><code>maxWidth</code> Integer (可选) - 窗口的最大宽度, 默认无限制</li><li><code>maxHeight</code> Integer (可选) - 窗口的最大高度, 默认无限制</li><li><code>resizable</code> Boolean (可选) - 窗口是否可以改变尺寸. 默认值为true</li><li><code>movable</code> Boolean (可选) - 窗口是否可以移动</li><li><code>minimizable</code> Boolean (可选) - 窗口是否可以最小化</li><li><code>maximizable</code> Boolean (可选) - 窗口是否可以最大化动</li><li><code>closable</code> Boolean (可选) - 窗口是否可以关闭</li><li><code>focusable</code> Boolean (可选) - 窗口是否可以聚焦。 在 Windows 中设置 focusable: false 也意味着设置了skipTaskbar: true. 在 Linux 中设置 focusable: false 时窗口停止与 wm 交互, 并且窗口将始终置顶</li><li><code>alwaysOnTop</code> Boolean (可选) -窗口是否永远在别的窗口的上面. 默认值为false</li><li><code>fullscreen</code> Boolean (可选) - 窗口是否全屏. 当明确设置为 false 时，在 macOS 上全屏的按钮将被隐藏或禁用. 默认值为 false</li><li><code>fullscreenable</code> Boolean (可选) - 窗口是否可以进入全屏状态. 在 macOS上, 最大化/缩放按钮是否可用 默认值为 true</li><li><code>simpleFullscreen</code> Boolean (可选) - 在 macOS 上使用 pre-Lion 全屏. 默认为false</li><li><code>skipTaskbar</code> Boolean (可选) - 是否在任务栏中显示窗口. 默认值为false</li><li><code>kiosk Boolean</code> (可选) - kiosk 模式. 默认值为 false</li><li><code>titleString</code>(可选) - 默认窗口标题 默认为”Electron”。 如果由loadURL()加载的HTML文件中含有标签<code>title</code>，此属性将被忽略。</li><li><code>icon</code> (NativeImage | String) (可选) - 窗口的图标. 在 Windows 上推荐使用 ICO 图标来获得最佳的视觉效果, 默认使用可执行文件的图标</li><li><code>show</code> Boolean (可选) - 窗口创建的时候是否显示. 默认值为true</li><li><code>frame</code> Boolean (可选) - 设置为 false 时可以创建一个Frameless Window</li><li><code>BrowserWindow</code> (可选) - 指定父窗口. 默认值为 null</li><li><code>modal </code>Boolean (可选) -是否为模态窗. 仅供子窗口使用. 默认值为false</li><li><code>acceptFirstMouse</code> Boolean (可选) - 是否允许单击页面来激活窗口. 默认值为 false</li><li><code>disableAutoHideCursor</code> Boolean (可选) - 是否在输入时隐藏鼠标. 默认值为false</li><li><code>autoHideMenuBar</code> Boolean (可选) - 自动隐藏菜单栏, 除非按了Alt键. 默认值为false</li><li><code>backgroundColor</code> String(可选) - 窗口的背景颜色为十六进制值</li><li><code>hasShadow </code>Boolean (optional) - 窗口是否有阴影. 默认值为 true</li><li><code>titleBarStyle</code> String (可选) - 窗口标题栏的样式. 默认值为 default（hidden、hiddenInset、customButtonsOnHover）</li></ol><h3 id="实例事件"><a href="#实例事件" class="headerlink" title="实例事件"></a>实例事件</h3><ol><li><code>‘page-title-updated’</code> 文档标题更改时触发</li><li><code>‘close’</code> 在窗口要关闭的时候触发</li><li><code>‘closed’</code> 窗口已经关闭时触发</li><li><code>‘session-end’</code> Windows上强制关机或机器重启或会话注销而导致窗口会话结束时触发</li><li><code>‘unresponsive’</code> 网页变得未响应时触发</li><li><code>‘responsive’ </code>未响应的页面变成响应时触发</li><li><code>‘blur’</code> 当窗口失去焦点时触发</li><li><code>‘focus’ </code>当窗口获得焦点时触发</li><li><code>‘show’</code> 当窗口显示时触发</li><li><code>‘hide’</code> 当窗口隐藏时触发</li><li><code>‘ready-to-show’</code> 当页面已经渲染完成(但是还没有显示) 并且窗口可以被显示时触发</li><li><code>‘maximize’</code> 窗口最大化时触发</li><li><code>‘unmaximize’</code> 当窗口从最大化状态退出时触发</li><li><code>‘minimize’</code> 窗口最小化时触发</li><li><code>‘restore’</code>当窗口从最小化状态恢复时触发</li><li><code>‘will-resize’</code> 在调整窗口大小之前触发</li><li><code>‘resize’ </code>调整窗口大小后触发</li><li><code>‘will-move’</code> 手动调整窗口大小时才会触发</li><li><code>‘move’</code> 窗口移动到新位置时触发</li><li><code>‘enter-full-screen’</code> 窗口进入全屏状态时触发</li><li><code>‘leave-full-screen’</code> 窗口离开全屏状态时触发</li></ol><h3 id="实例方法-1"><a href="#实例方法-1" class="headerlink" title="实例方法"></a>实例方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">win.destroy()  <span class="comment">// 强制关闭窗口</span></span><br><span class="line">win.close()  <span class="comment">// 尝试关闭窗口</span></span><br><span class="line">win.focus()  <span class="comment">// 聚焦于窗口</span></span><br><span class="line">win.blur()   <span class="comment">//取消窗口的聚焦</span></span><br><span class="line">win.isFocused()  <span class="comment">// 判断窗口是否聚焦</span></span><br><span class="line">win.isDestroyed()   <span class="comment">//判断窗口是否被销毁</span></span><br><span class="line">win.show()  <span class="comment">// 显示并聚焦于窗口</span></span><br><span class="line">win.showInactive()  <span class="comment">// 显示但不聚焦于窗口</span></span><br><span class="line">win.hide()  <span class="comment">// 隐藏窗口</span></span><br><span class="line">win.isVisible()  <span class="comment">// 判断窗口是否可见</span></span><br><span class="line">win.isModal()  <span class="comment">// 判断是否为模态窗口</span></span><br><span class="line">win.maximize()  <span class="comment">// 最大化窗口</span></span><br><span class="line">win.unmaximize()  <span class="comment">// 取消窗口最大化</span></span><br><span class="line">win.isMaximized()   <span class="comment">//判断窗口是否最大化</span></span><br><span class="line">win.minimize()  <span class="comment">// 窗口最小化</span></span><br><span class="line">win.restore()   <span class="comment">//将窗口从最小化状态恢复到以前的状态</span></span><br><span class="line">win.isMinimized()   <span class="comment">//判断窗口是否最小化</span></span><br><span class="line">win.setFullScreen(flag)  <span class="comment">// 设置窗口是否应处于全屏模式</span></span><br><span class="line">win.isFullScreen()   <span class="comment">//窗口当前是否已全屏</span></span><br><span class="line">win.isNormal()   <span class="comment">//窗口是否处于正常状态（未最大化，未最小化，不在全屏模式下）</span></span><br><span class="line">win.setAspectRatio(aspectRatio)   <span class="comment">//设置窗口宽高比</span></span><br><span class="line">win.setBackgroundColor(backgroundColor)   <span class="comment">//设置窗体的背景颜色</span></span><br><span class="line">win.getBounds()   <span class="comment">//返回窗口对象的位置及宽高</span></span><br><span class="line">win.setContentBounds(bounds[, animate])   <span class="comment">//设置窗口对象的位置及宽高</span></span><br><span class="line">win.getContentBounds()   <span class="comment">//返回窗口工作区的位置及宽高</span></span><br><span class="line">win.getNormalBounds()   <span class="comment">//返回正常状态下的窗口大小</span></span><br><span class="line">win.setEnabled(enable)   <span class="comment">//禁用或者启用窗口</span></span><br><span class="line">win.isEnabled()   <span class="comment">//判断是否启用窗口</span></span><br><span class="line">win.setSize(width, height[, animate])   <span class="comment">//调整窗口的大小</span></span><br><span class="line">win.getSize()   <span class="comment">//获取窗口的宽度和高度</span></span><br></pre></td></tr></table></figure><h3 id="静态方法-1"><a href="#静态方法-1" class="headerlink" title="静态方法"></a>静态方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BrowserWindow.getAllWindows() <span class="comment">// 获取所有打开的窗口的数组</span></span><br><span class="line">BrowserWindow.getFocusedWindow() <span class="comment">// 获取当前获得焦点的窗口</span></span><br></pre></td></tr></table></figure><h2 id="剪切板"><a href="#剪切板" class="headerlink" title="剪切板"></a>剪切板</h2><blockquote><p>在系统剪贴板上执行复制和粘贴操作。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; clipboard &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line">clipboard.write(&#123;</span><br><span class="line">    text: <span class="string">'test'</span>,</span><br><span class="line">    html: <span class="string">'&lt;b&gt;Hi&lt;/b&gt;'</span>,</span><br><span class="line">    rtf: <span class="string">'&#123;\\rtf1\\utf8 text&#125;'</span>,</span><br><span class="line">    bookmark: <span class="string">'a title'</span></span><br><span class="line">&#125;) <span class="comment">//第二个参数type默认是clipboard，selection只在Linux中可用</span></span><br><span class="line">clipboard.readText(<span class="string">'clipboard'</span>) <span class="comment">//=&gt;test</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">clipboard.readText([type]) <span class="comment">//读取剪切板文字</span></span><br><span class="line">clipboard.writeText(text) <span class="comment">//写入剪切板文字</span></span><br><span class="line">clipboard.readHTML([type]) </span><br><span class="line">clipboard.writeHTML(markup[, type])</span><br><span class="line">clipboard.readImage([type])</span><br><span class="line">clipboard.writeImage(image[, type])</span><br><span class="line">clipboard.readRTF([type])</span><br><span class="line">clipboard.writeRTF(text[, type])</span><br><span class="line">clipboard.readBookmark()</span><br><span class="line">clipboard.writeBookmark(title, url[, type])</span><br><span class="line">clipboard.clear([type]) <span class="comment">//清空剪切板</span></span><br></pre></td></tr></table></figure><h2 id="对话框-带Sync为同步"><a href="#对话框-带Sync为同步" class="headerlink" title="对话框(带Sync为同步)"></a>对话框(带Sync为同步)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; dialog &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line">dialog.showOpenDialog(&#123;</span><br><span class="line">    properties: [<span class="string">'openFile'</span>, <span class="string">'multiSelections'</span>] </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开文件</span></span><br><span class="line">dialog.showOpenDialog(&#123;</span><br><span class="line">    title: <span class="string">"请选择文件"</span>,</span><br><span class="line">    defaultPath: <span class="string">""</span>,</span><br><span class="line">    filters: [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">"txt"</span>,</span><br><span class="line">            extensions: [<span class="string">"txt"</span>, <span class="string">"json"</span>, <span class="string">"js"</span>, <span class="string">"css"</span>, <span class="string">"styl"</span>, <span class="string">"html"</span>, <span class="string">"vue"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    buttonLabel: <span class="string">"打开文件"</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!result.canceled) &#123;</span><br><span class="line">        <span class="comment">//todo</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//todo</span></span><br><span class="line">&#125;);;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存文件</span></span><br><span class="line">dialog.showSaveDialog(&#123;</span><br><span class="line">    title: <span class="string">"保存文件"</span>,</span><br><span class="line">    defaultPath: <span class="string">""</span>,</span><br><span class="line">    filters: [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">"txt"</span>,</span><br><span class="line">            extensions: [<span class="string">"txt"</span>, <span class="string">"json"</span>, <span class="string">"js"</span>, <span class="string">"css"</span>, <span class="string">"styl"</span>, <span class="string">"html"</span>, <span class="string">"vue"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    buttonLabel: <span class="string">"保存文件"</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!result.canceled) &#123;</span><br><span class="line">        <span class="comment">//todo</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//todo</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消息提示框</span></span><br><span class="line">dialog.showMessageBox(&#123;</span><br><span class="line">    title: <span class="string">"标题"</span>,</span><br><span class="line">    message: <span class="string">"提示的内容"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误提示框</span></span><br><span class="line">dialog.showErrorBox(<span class="string">'标题'</span>,<span class="string">'提示的内容'</span>)</span><br></pre></td></tr></table></figure><h2 id="文件对象"><a href="#文件对象" class="headerlink" title="文件对象"></a>文件对象</h2><blockquote><p>DOM的文件接口提供了关于原生文件的抽象，以便用户可以直接使用HTML5文件API处理原生文件。 Electron已经向 <code>文件</code> 接口添加了一个 <code>path</code> 属性, 在文件系统上暴露出文件的真实路径</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"drag"</span> <span class="attr">style</span>=<span class="string">"width: 200px;height: 200px;background-color: chartreuse;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> dragtest = <span class="built_in">document</span>.querySelector(<span class="string">'#drag'</span>)</span></span><br><span class="line"><span class="javascript">    dragtest.ondrop = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        e.preventDefault() <span class="comment">//必须阻止默认事件</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(e.dataTransfer.files[<span class="number">0</span>]) <span class="comment">//拖拽到app上的文件的真实路径</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    dragtest.ondragover = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        e.preventDefault() <span class="comment">//必须阻止默认事件</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="网页间共享数据"><a href="#网页间共享数据" class="headerlink" title="网页间共享数据"></a>网页间共享数据</h2><ol><li>使用<code>localStorage</code>，<code>sessionStorage</code> 或者 <code>IndexedDB</code>。</li><li>使用<code>Electron</code>内的IPC机制实现，将数据村子主进程的某个全局变量中，然后在多个渲染进程中使用<code>remote</code>模块来访问它。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在主进程中</span></span><br><span class="line">global.data = &#123;</span><br><span class="line">    item:<span class="string">'value'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染进程中</span></span><br><span class="line"><span class="comment">// 第一个页面设置item</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'electron'</span>).remote.getGlobal(<span class="string">'data'</span>).item = <span class="string">'new value'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个页面获取item</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'electron'</span>).remote.getGlobal(<span class="string">'data'</span>).item <span class="comment">// =&gt; 'new value'</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="全局快捷键"><a href="#全局快捷键" class="headerlink" title="全局快捷键"></a>全局快捷键</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, globalShortcut &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line">app.on(<span class="string">'ready'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 注册一个 'ctrl+X' 的全局快捷键</span></span><br><span class="line">    <span class="keyword">const</span> ret = globalShortcut.register(<span class="string">'ctrl+X'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ctrl+X is pressed'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (!ret) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'registration failed'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查快捷键是否注册成功</span></span><br><span class="line">    <span class="built_in">console</span>.log(globalShortcut.isRegistered(<span class="string">'ctrl+X'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'will-quit'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 注销快捷键</span></span><br><span class="line">    globalShortcut.unregister(<span class="string">'ctrl+X'</span>)</span><br><span class="line">    <span class="comment">// 注销所有快捷键</span></span><br><span class="line">    globalShortcut.unregisterAll()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">globalShortcut.register(accelerator, callback) <span class="comment">//注册快捷键</span></span><br><span class="line">globalShortcut.isRegistered(accelerator) <span class="comment">//全局快捷键是否注册成功</span></span><br><span class="line">globalShortcut.unregister(accelerator) <span class="comment">//注销的全局快捷键。</span></span><br><span class="line">globalShortcut.unregisterAll() <span class="comment">//注销所有的全局快捷键</span></span><br></pre></td></tr></table></figure><h2 id="IPC通信"><a href="#IPC通信" class="headerlink" title="IPC通信"></a>IPC通信</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在主进程中.</span></span><br><span class="line"><span class="keyword">const</span> &#123; ipcMain &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line">ipcMain.on(<span class="string">'asynchronous-message'</span>, (event, arg) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg) <span class="comment">// prints "ping"</span></span><br><span class="line">    event.reply(<span class="string">'asynchronous-reply'</span>, <span class="string">'pong'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在渲染器进程 (网页) 中。</span></span><br><span class="line"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line">ipcRenderer.on(<span class="string">'asynchronous-reply'</span>, (event, arg) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg) <span class="comment">// prints "pong"</span></span><br><span class="line">&#125;)</span><br><span class="line">ipcRenderer.send(<span class="string">'asynchronous-message'</span>, <span class="string">'ping'</span>)</span><br></pre></td></tr></table></figure><h3 id="方法-IpcMain"><a href="#方法-IpcMain" class="headerlink" title="方法(IpcMain)"></a>方法(IpcMain)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ipcMain.on(channel, listener) <span class="comment">//注册一个监听</span></span><br><span class="line">ipcMain.once(channel, listener) <span class="comment">//注册一个只监听一次的监听</span></span><br><span class="line">ipcMain.removeListener(channel, listener) <span class="comment">//移除一个监听</span></span><br><span class="line">ipcMain.removeAllListeners([channel]) <span class="comment">//移除所有监听</span></span><br></pre></td></tr></table></figure><h3 id="方法-IpcRenderer"><a href="#方法-IpcRenderer" class="headerlink" title="方法(IpcRenderer)"></a>方法(IpcRenderer)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ipcRenderer.on(channel, listener) <span class="comment">//注册一个监听</span></span><br><span class="line">ipcRenderer.once(channel, listener) <span class="comment">//注册一个只监听一次的监听</span></span><br><span class="line">ipcRenderer.removeListener(channel, listener) <span class="comment">//移除一个监听</span></span><br><span class="line">ipcRenderer.removeAllListeners(channel) <span class="comment">//移除所有监听</span></span><br><span class="line">ipcRenderer.send(channel, ...args) <span class="comment">//异步给指定的channel发送消息</span></span><br><span class="line">ipcRenderer.sendSync(channel, ...args) <span class="comment">//同步给指定的channel发送消息</span></span><br></pre></td></tr></table></figure><h2 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Menu &#125; = <span class="built_in">require</span>(<span class="string">"electron"</span>);</span><br></pre></td></tr></table></figure><h3 id="静态方法-2"><a href="#静态方法-2" class="headerlink" title="静态方法"></a>静态方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Menu.setApplicationMenu(menu) <span class="comment">//设置菜单</span></span><br><span class="line">Menu.getApplicationMenu() <span class="comment">//返回菜单</span></span><br><span class="line">Menu.buildFromTemplate(template) <span class="comment">//构建菜单</span></span><br></pre></td></tr></table></figure><h3 id="实例方法-2"><a href="#实例方法-2" class="headerlink" title="实例方法"></a>实例方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">menu.popup([options]) <span class="comment">// 弹出上下文菜单</span></span><br><span class="line">menu.closePopup() <span class="comment">// 关闭上下文菜单</span></span><br><span class="line">menu.append(menuItem) <span class="comment">// 将菜单项追加到菜单</span></span><br><span class="line">menu.getMenuItemById(id) <span class="comment">// 返回具有指定id的菜单项</span></span><br><span class="line">menu.insert(pos, menuItem) <span class="comment">// 在指定位置插入菜单项</span></span><br></pre></td></tr></table></figure><h3 id="实例事件-1"><a href="#实例事件-1" class="headerlink" title="实例事件"></a>实例事件</h3><ol><li><code>‘menu-will-show’</code> 调用<code>menu.popup()</code>事件时触发该事件</li><li><code>‘menu-will-close’</code> 手动关闭弹出，或使用<code>menu.closePopup()</code>方法关闭弹出时，触发该事件</li></ol><h3 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h3><ol><li><code>menu.items</code> 菜单项数组</li></ol><h2 id="网络请求-electron中可以使用axios等流行的网络请求库"><a href="#网络请求-electron中可以使用axios等流行的网络请求库" class="headerlink" title="网络请求(electron中可以使用axios等流行的网络请求库)"></a>网络请求(electron中可以使用axios等流行的网络请求库)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line">app.on(<span class="string">'ready'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; net &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line">    <span class="keyword">const</span> request = net.request(<span class="string">'https://github.com'</span>)</span><br><span class="line">    request.on(<span class="string">'response'</span>, (response) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response)</span><br><span class="line">        <span class="keyword">var</span> data;</span><br><span class="line">        response.on(<span class="string">'data'</span>, (chunk) =&gt; &#123;</span><br><span class="line">            data+=chunk</span><br><span class="line">        &#125;)</span><br><span class="line">        response.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    request.end() <span class="comment">//！！！注意</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Notification &#125; = <span class="built_in">require</span>(<span class="string">"electron"</span>);<span class="comment">//在渲染进程中使用HTML5 API,在主进程中引入该模块</span></span><br></pre></td></tr></table></figure><h3 id="在渲染进程中使用HTML5-API"><a href="#在渲染进程中使用HTML5-API" class="headerlink" title="在渲染进程中使用HTML5 API"></a>在渲染进程中使用HTML5 API</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myNotification = <span class="keyword">new</span> Notification(<span class="string">'标题'</span>, &#123;</span><br><span class="line">  body: <span class="string">'通知正文内容'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">myNotification.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'通知被点击'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在主进程中使用-Notification-模块"><a href="#在主进程中使用-Notification-模块" class="headerlink" title="在主进程中使用 Notification 模块"></a>在主进程中使用 <strong>Notification</strong> 模块</h3><p><strong>new Notification([options])</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> notification = <span class="keyword">new</span> Notification(&#123;</span><br><span class="line">    title: <span class="string">'标题'</span>，</span><br><span class="line">    body: <span class="string">'通知正文内容'</span></span><br><span class="line">&#125;).show()</span><br></pre></td></tr></table></figure></p><p><strong><code>参数</code>Object(可选)</strong></p><ol><li><code>title</code> String - 通知的标题, 将在通知窗口的顶部显示.</li><li><code>subtitle</code>String (可选) 通知的副标题, 显示在标题下面。 macOS</li><li><code>body</code>String 通知的正文文本, 将显示在标题或副标题下面.</li><li><code>silent</code>Boolean (可选) 在显示通知时是否发出系统提示音。</li><li><code>icon</code>(String | NativeImage ) (可选) 用于在该通知上显示的图标。</li><li><code>hasReply</code>Boolean (可选) 是否在通知中添加一个答复选项。 macOS</li><li><code>timeoutType</code> String (optional) <code>Linux</code> <code>Windows</code> - The timeout duration of the notification. Can be ‘default’ or ‘never’.</li><li><code>replyPlaceholder</code>String (可选) 答复输入框中的占位符。 macOS</li><li><code>sound</code>String (可选) 显示通知时播放的声音文件的名称。 macOS</li><li><code>urgency</code> String (optional) <code>Linux</code> - The urgency level of the notification. Can be ‘normal’, ‘critical’, or ‘low’.</li><li><code>actions</code> NotificationAction[] (可选) <code>macOS</code> - 要添加到通知中的操作 请阅读 <code>NotificationAction</code>文档来了解可用的操作和限制。</li><li><code>closeButton</code>Text String (可选) <code>macOS</code> - 自定义的警告框关闭按钮文字。如果该字符串为空，那么将使用本地化的默认文本。</li></ol><p><strong>实例方法</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notification.show()</span><br><span class="line">notification.close()</span><br></pre></td></tr></table></figure></p><h2 id="在线离线-侦测"><a href="#在线离线-侦测" class="headerlink" title="在线离线 侦测"></a>在线离线 侦测</h2><h3 id="渲染进程-navigator-onLine"><a href="#渲染进程-navigator-onLine" class="headerlink" title="渲染进程(navigator.onLine)"></a>渲染进程(navigator.onLine)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> alertOnlineStatus = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.alert(navigator.onLine ? <span class="string">"online"</span> : <span class="string">"offline"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"online"</span>, alertOnlineStatus);</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"offline"</span>, alertOnlineStatus);</span><br><span class="line">alertOnlineStatus();</span><br></pre></td></tr></table></figure><h2 id="电源监视器"><a href="#电源监视器" class="headerlink" title="电源监视器"></a>电源监视器</h2><blockquote><p>监视电源状态的改变。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">powerMonitor.on(<span class="string">'suspend'</span>,()=&gt;&#123;</span><br><span class="line">    <span class="keyword">new</span> Notification(&#123;</span><br><span class="line">        title: <span class="string">'电源监视器'</span>,</span><br><span class="line">        body: <span class="string">'系统挂起'</span></span><br><span class="line">    &#125;).show()</span><br><span class="line">&#125;)</span><br><span class="line">powerMonitor.on(<span class="string">'resume'</span>,()=&gt;&#123;</span><br><span class="line">    <span class="keyword">new</span> Notification(&#123;</span><br><span class="line">        title: <span class="string">'电源监视器'</span>,</span><br><span class="line">        body: <span class="string">'系统恢复'</span></span><br><span class="line">    &#125;).show()</span><br><span class="line">&#125;)</span><br><span class="line">powerMonitor.on(<span class="string">'on-ac'</span>,()=&gt;&#123;</span><br><span class="line">    <span class="keyword">new</span> Notification(&#123;</span><br><span class="line">        title: <span class="string">'电源监视器'</span>,</span><br><span class="line">        body: <span class="string">'交流电触发'</span></span><br><span class="line">    &#125;).show()</span><br><span class="line">&#125;)</span><br><span class="line">powerMonitor.on(<span class="string">'on-battery'</span>,()=&gt;&#123;</span><br><span class="line">    <span class="keyword">new</span> Notification(&#123;</span><br><span class="line">        title: <span class="string">'电源监视器'</span>,</span><br><span class="line">        body: <span class="string">'使用电池电量触发'</span></span><br><span class="line">    &#125;).show()</span><br><span class="line">&#125;)</span><br><span class="line">powerMonitor.on(<span class="string">'loca-screen'</span>,()=&gt;&#123;</span><br><span class="line">    <span class="keyword">new</span> Notification(&#123;</span><br><span class="line">        title: <span class="string">'电源监视器'</span>,</span><br><span class="line">        body: <span class="string">'当即将锁定屏幕时触发'</span></span><br><span class="line">    &#125;).show()</span><br><span class="line">&#125;)</span><br><span class="line">powerMonitor.on(<span class="string">'unlock-screen'</span>,()=&gt;&#123;</span><br><span class="line">    <span class="keyword">new</span> Notification(&#123;</span><br><span class="line">        title: <span class="string">'电源监视器'</span>,</span><br><span class="line">        body: <span class="string">'屏幕解锁触发'</span></span><br><span class="line">    &#125;).show()</span><br><span class="line">&#125;)</span><br><span class="line">powerMonitor.getSystemIdleState(num)) <span class="comment">//电脑num秒前的状态</span></span><br><span class="line">powerMonitor.getSystemIdleTime() <span class="comment">//电脑空闲的时间</span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="省电拦截器"><a href="#省电拦截器" class="headerlink" title="省电拦截器"></a>省电拦截器</h2><blockquote><p>阻止系统进入低功耗 (休眠) 模式。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; powerSaveBlocker &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> id = powerSaveBlocker.start(<span class="string">'prevent-display-sleep'</span>) <span class="comment">// 阻止操作系统关闭显示器</span></span><br><span class="line"><span class="built_in">console</span>.log(powerSaveBlocker.isStarted(id))</span><br></pre></td></tr></table></figure><h3 id="方法-4"><a href="#方法-4" class="headerlink" title="方法"></a>方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">powerSaveBlocker.start(type) <span class="comment">// type取值prevent-app-suspension(仅防止应用程序被挂起)|prevent-display-sleep(阻止操作系统关闭显示器)</span></span><br><span class="line">powerSaveBlocker.stop(id) <span class="comment">// 停止指定的省电拦截器</span></span><br><span class="line">powerSaveBlocker.isStarted(id) <span class="comment">// 指定的省电拦截器是否启动</span></span><br></pre></td></tr></table></figure><h2 id="任务栏的进度条"><a href="#任务栏的进度条" class="headerlink" title="任务栏的进度条"></a>任务栏的进度条</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"><span class="keyword">const</span> mainWin = <span class="keyword">new</span> BrowserWindow()</span><br><span class="line">mainWin.setProgressBar(<span class="number">0.5</span>) <span class="comment">// 参数为0-1</span></span><br></pre></td></tr></table></figure><h2 id="RecentDocument-底部的最近打开"><a href="#RecentDocument-底部的最近打开" class="headerlink" title="RecentDocument(底部的最近打开)"></a>RecentDocument(底部的最近打开)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增加一个文件到最近文件列表</span></span><br><span class="line"><span class="keyword">const</span> &#123; app &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line">app.addRecentDocument(<span class="string">'D://新建文本.txt'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 清空最近文件列表</span></span><br><span class="line"><span class="keyword">const</span> &#123; app &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line">app.clearRecentDocuments()</span><br></pre></td></tr></table></figure><h2 id="remote"><a href="#remote" class="headerlink" title="remote"></a>remote</h2><h3 id="electron中分主进程和渲染进程"><a href="#electron中分主进程和渲染进程" class="headerlink" title="electron中分主进程和渲染进程"></a>electron中分主进程和渲染进程</h3><ol><li><strong>主进程中可以使用的模块</strong>：app、autoUpdater、BrowserView,BrowserWindow、contentTracing、dialog、globalShortcut、inAppPurchase、ipcMain、Menu、MenuItem、net、netLog、通知、powerMonitor、powerSaveBlocker、protocol、screen、session、systemPreferences、触控板、Tray、webContents.</li><li><strong>渲染进程中可以使用的模块</strong>：desktopCapturer、ipcRenderer、remote、webFrame</li><li><strong>两种进程都可用的模块</strong>：clipboard、crashReporter、nativeImage、shell</li></ol><p><strong>借助remote,可以在渲染进程中使用主进程中的模块</strong></p><h2 id="屏幕"><a href="#屏幕" class="headerlink" title="屏幕"></a>屏幕</h2><blockquote><p>检索有关屏幕大小、显示器、光标位置等的信息。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow, screen &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"><span class="keyword">let</span> win</span><br><span class="line">app.on(<span class="string">'ready'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; width, height &#125; = screen.getPrimaryDisplay().workAreaSize</span><br><span class="line">  win = <span class="keyword">new</span> BrowserWindow(&#123; width, height &#125;)</span><br><span class="line">  win.loadURL(<span class="string">'https://github.com'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="方法-5"><a href="#方法-5" class="headerlink" title="方法"></a>方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">screen.getCursorScreenPoint() <span class="comment">// 返回当前鼠标的绝对位置</span></span><br><span class="line">screen.getPrimaryDisplay() <span class="comment">// 返回主窗口对象</span></span><br><span class="line">screen.getAllDisplays() <span class="comment">// 返回窗口数组</span></span><br><span class="line">screen.getDisplayNearestPoint(point) <span class="comment">// 返回离指定点最近的一个窗口</span></span><br><span class="line">screen.getDisplayMatching(rect) <span class="comment">// 返回离指定的图形最密切相交一个窗口</span></span><br></pre></td></tr></table></figure><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'display-added'</span> <span class="comment">// 新的窗口被添加时触发</span></span><br><span class="line"><span class="string">'display-removed'</span> <span class="comment">// 旧的窗口被移除时触发</span></span><br><span class="line"><span class="string">'display-metrics-changed'</span> <span class="comment">// 窗口对象中的一个或多个值发生改变时触发</span></span><br></pre></td></tr></table></figure><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; shell &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line">shell.openExternal(<span class="string">'https://github.com'</span>)<span class="comment">// 在用户的默认浏览器中打开URL</span></span><br></pre></td></tr></table></figure><h3 id="方法-6"><a href="#方法-6" class="headerlink" title="方法"></a>方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">shell.showItemInFolder(fullPath) <span class="comment">//在文件管理器中显示给定路径的文件,并选中</span></span><br><span class="line">shell.openItem(fullPath) <span class="comment">//以桌面的默认方式打开给定的文件</span></span><br><span class="line">shell.openExternal(url) <span class="comment">//在用户的默认浏览器中打开URL</span></span><br><span class="line">shell.moveItemToTrash(fullPath) <span class="comment">//把路径为fullPath的文件移动到垃圾箱,返回操作状态</span></span><br><span class="line">shell.beep() <span class="comment">//播放哔哔的声音</span></span><br></pre></td></tr></table></figure><h2 id="网页嵌入electron的三种方法"><a href="#网页嵌入electron的三种方法" class="headerlink" title="网页嵌入electron的三种方法"></a>网页嵌入electron的三种方法</h2><blockquote><p>如果要将Web内容嵌入electron中的<code>BrowserWindow</code>，则可以使用三个选项：<code>&lt;iframe&gt;</code>标签，<code>&lt;webview&gt;</code>标签和<code>BrowserViews</code>。每个选项提供的功能略有不同，在不同情况下很有用。为了帮助您在这两者之间进行选择，本指南将说明两者的区别和功能。</p></blockquote><h3 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h3><blockquote><p>Electron中的iframe与常规浏览器中的iframe一样。<code>&lt;iframe&gt;</code>页面中的元素可以显示外部网页，前提是其内容安全策略允许。为了限制<code>&lt;iframe&gt;</code>标记中站点的功能数量，建议使用<code>sandbox</code>属性，并且仅允许您要支持的功能。</p></blockquote><h3 id="webview"><a href="#webview" class="headerlink" title="webview"></a>webview</h3><blockquote><p>WebView基于Chromium的WebView，Electron未明确支持。我们不保证WebView API在Electron的将来版本中仍然可用。使用<code>&lt;webview&gt;</code>标签，您需要在BrowserWindow中设置webPreferences.webviewTag = true。<br>WebView是一个自定义元素（<code>&lt;webview&gt;</code>），仅在Electron内部起作用。它们被实现为“进程外iframe”。这意味着与的所有通信<code>&lt;webview&gt;</code>都是使用IPC异步完成的。该<code>&lt;webview&gt;</code>元素具有许多类似于的自定义方法和事件，webContents可让您更好地控制内容。<br>与相比<code>&lt;iframe&gt;</code>，<code>&lt;webview&gt;</code>往往会稍微慢一些，但在加载和与第三方内容通信以及处理各种事件方面提供了更大的控制权。</p></blockquote><h3 id="BrowserViews"><a href="#BrowserViews" class="headerlink" title="BrowserViews"></a>BrowserViews</h3><blockquote><p>BrowserView不是DOM的一部分-相反，它们是在主进程中创建并由其控制的。它们只是现有窗口顶部的另一层Web内容。这意味着它们与您自己的BrowserWindow内容完全分开，并且它们的位置不受DOM或CSS的控制，而是通过在主过程中设置界限来控制的。<br>BrowserView提供了对其内容的最大控制，因为它们的实现webContents方式与实现方式相似BrowserWindow。但是，它们不是您DOM的一部分，而是覆盖在它们之上，这意味着您将必须手动管理它们的位置。</p></blockquote><h2 id="webFrame"><a href="#webFrame" class="headerlink" title="webFrame"></a>webFrame</h2><blockquote><p>自定义渲染当前网页</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; webFrame &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line">webFrame.setZoomFactor(<span class="number">2</span>) <span class="comment">// 将当前页缩放到200%</span></span><br><span class="line">webFrame.getZoomFactor() <span class="comment">// 获取当前的缩放比例</span></span><br><span class="line"><span class="keyword">const</span> cssKey = webFrame.insertCSS(<span class="string">"h2&#123;color:#fff;&#125;"</span>) <span class="comment">// 将css注入当前网页</span></span><br><span class="line">webFrame.executeJavaScript(<span class="string">`</span></span><br><span class="line"><span class="string">    setTimeout(()=&gt;&#123;</span></span><br><span class="line"><span class="string">        console.log(1)</span></span><br><span class="line"><span class="string">    &#125;,1000)</span></span><br><span class="line"><span class="string">`</span>) <span class="comment">// 将js注入当前网页</span></span><br></pre></td></tr></table></figure><h3 id="方法-7"><a href="#方法-7" class="headerlink" title="方法"></a>方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">webFrame.setZoomFactor(factor) <span class="comment">// 设置缩放</span></span><br><span class="line">webFrame.getZoomFactor() <span class="comment">// 获取缩放倍数</span></span><br><span class="line">webFrame.insertCSS(css) <span class="comment">// 当前网页中注入css</span></span><br><span class="line">webFrame.removeInsertedCSS(key) <span class="comment">// 当前网页中删除注入的css,key取注入时的返回值</span></span><br><span class="line">webFrame.executeJavaScript(code) <span class="comment">// 当前网页中注入js</span></span><br><span class="line">webFrame.clearCache() <span class="comment">// 尝试释放不再使用的内存</span></span><br></pre></td></tr></table></figure><h2 id="打包遇到的问题"><a href="#打包遇到的问题" class="headerlink" title="打包遇到的问题"></a>打包遇到的问题</h2><p>electron打包有多种工具,如<code>electron-packager</code>,<code>electron-builder</code>,<code>grunt-electron-installer</code>等,我使用<code>electron-builder</code>打包成功。<br>第一次打包会下载一些依赖文件,在大陆正常情况是下载不成功的,使用科学上网也可能下载不成功,执行打包命令时控制台会打印当前下载的文件的链接,复制链接，手动下载后解压到<code>\AppData\Local\electron-builder\Cache</code>目录<br>package.json文件的build字段参考如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"build"</span>: &#123;</span><br><span class="line">    <span class="string">"appId"</span>: <span class="string">"com.test.app"</span>,</span><br><span class="line">    <span class="string">"productName"</span>:<span class="string">"productName"</span>, </span><br><span class="line">    <span class="string">"copyright"</span>:<span class="string">"xxx"</span>,</span><br><span class="line">    <span class="string">"directories"</span>: &#123;</span><br><span class="line">        <span class="string">"app"</span>: <span class="string">"./"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"icon"</span>: <span class="string">"./fav.ico"</span>,</span><br><span class="line">    <span class="string">"nsis"</span>: &#123;</span><br><span class="line">        <span class="string">"oneClick"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"allowToChangeInstallationDirectory"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"perMachine"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"runAfterFinish"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;img src=&quot;https://images.pexels.com/photos/1647962/pexels-photo-1647962.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=1&amp;w=800&quot; height=&quot;50%&quot; width=&quot;50%&quot;&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&quot;app&quot;&gt;&lt;a href=&quot;#app&quot; class=&quot;headerlink&quot; title=&quot;app&quot;&gt;&lt;/a&gt;app&lt;/h2&gt;&lt;h3 id=&quot;钩子函数&quot;&gt;&lt;a href=&quot;#钩子函数&quot; class=&quot;headerlink&quot; title=&quot;钩子函数&quot;&gt;&lt;/a&gt;钩子函数&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;‘will-finish-launching’&lt;/code&gt; 当应用程序完成基础的启动的时候被触发。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;‘ready’&lt;/code&gt; 当 Electron 完成初始化时被触发&lt;/li&gt;
&lt;li&gt;&lt;code&gt;‘window-all-closed’&lt;/code&gt; 当所有的窗口都被关闭时触发。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;‘before-quit’&lt;/code&gt; 在应用程序开始关闭窗口之前触发。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;‘will-quit’&lt;/code&gt; 当所有窗口都已关闭并且应用程序将退出时发出。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;‘quit’&lt;/code&gt; 在应用程序退出时发出。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;‘browser-window-blur’&lt;/code&gt; 在 browserWindow 失去焦点时发出。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;‘browser-window-focus’&lt;/code&gt; 在 browserWindow 获得焦点时发出。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;‘browser-window-created’&lt;/code&gt; 在创建新的 browserWindow 时发出。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;‘web-contents-created’&lt;/code&gt; 在创建新的 webContents 时发出。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;‘session-created’&lt;/code&gt; 当 Electron创建了一个新的 session后被触发.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;‘remote-require’&lt;/code&gt; 在 webContents 的渲染器进程中调用 remote.require() 时发出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;‘remote-get-global’&lt;/code&gt; 在 webContents 的渲染器进程中调用 remote.getGlobal() 时发出。&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Electron" scheme="https://9240.github.io/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的this</title>
    <link href="https://9240.github.io/2019/08/16/javascript%E4%B8%AD%E7%9A%84this/"/>
    <id>https://9240.github.io/2019/08/16/javascript中的this/</id>
    <published>2019-08-15T16:00:00.000Z</published>
    <updated>2019-11-01T15:56:33.161Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-核心函数调用原语call方法"><a href="#1-核心函数调用原语call方法" class="headerlink" title="1.核心函数调用原语call方法"></a>1.核心函数调用原语call方法</h2><p>call()方法使用一个指定的this值和单独给出的一个或多个参数来调用一个函数（接收一个参数列表）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">world</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hello "</span> + world);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hello.call(<span class="string">"9240"</span>, <span class="string">"world"</span>) <span class="comment">//9240</span></span><br></pre></td></tr></table></figure></p><p>hello()方法设置”9240”为this,并传入一个参数”world”。这是JavaScript函数调用的核心原语</p><h2 id="2-简单函数调用"><a href="#2-简单函数调用" class="headerlink" title="2.简单函数调用"></a>2.简单函数调用</h2><p>一直调用函数的call()方法比较麻烦,所以JavaScript允许我们直接调用该方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">world</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hello "</span> + world);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hello(<span class="string">'world'</span>) <span class="comment">//Window</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p><code>this</code>指向了<code>Window</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">world</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hello "</span> + world);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hello(<span class="string">'world'</span>) <span class="comment">//undefined</span></span><br><span class="line">hello.call(<span class="literal">undefined</span>,<span class="string">'world'</span>) <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>在es5严格模式中<code>this</code>为<code>undefined</code>,即调用方式为<code>fn(…args)</code>与<code>fn.call(window [es5-strict:undefined],args)</code></p><h2 id="3-对象方法的调用"><a href="#3-对象方法的调用" class="headerlink" title="3.对象方法的调用"></a>3.对象方法的调用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Brendan Eich"</span>,</span><br><span class="line">  hello: <span class="function"><span class="keyword">function</span>(<span class="params">world</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hello "</span> + world);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person.hello(<span class="string">"world"</span>) <span class="comment">//person</span></span><br><span class="line"></span><br><span class="line">person.hello.call(person, <span class="string">"world"</span>); <span class="comment">//person</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">world</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hello "</span> + world);</span><br><span class="line">&#125;</span><br><span class="line">person = &#123; <span class="attr">name</span>: <span class="string">"Brendan Eich"</span> &#125;</span><br><span class="line">person.hello = hello;</span><br><span class="line">person.hello(<span class="string">"world"</span>) <span class="comment">//person</span></span><br><span class="line">hello(<span class="string">"world"</span>) <span class="comment">//Window</span></span><br></pre></td></tr></table></figure><p>对象中方法的<code>this</code>被调用时才确定,即谁调用<code>this</code>指向谁</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-核心函数调用原语call方法&quot;&gt;&lt;a href=&quot;#1-核心函数调用原语call方法&quot; class=&quot;headerlink&quot; title=&quot;1.核心函数调用原语call方法&quot;&gt;&lt;/a&gt;1.核心函数调用原语call方法&lt;/h2&gt;&lt;p&gt;call()方法使用一个指定的this值和单独给出的一个或多个参数来调用一个函数（接收一个参数列表）&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hello&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;world&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;hello &quot;&lt;/span&gt; + world);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hello.call(&lt;span class=&quot;string&quot;&gt;&quot;9240&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;world&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//9240&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;hello()方法设置”9240”为this,并传入一个参数”world”。这是JavaScript函数调用的核心原语&lt;/p&gt;
&lt;h2 id=&quot;2-简单函数调用&quot;&gt;&lt;a href=&quot;#2-简单函数调用&quot; class=&quot;headerlink&quot; title=&quot;2.简单函数调用&quot;&gt;&lt;/a&gt;2.简单函数调用&lt;/h2&gt;&lt;p&gt;一直调用函数的call()方法比较麻烦,所以JavaScript允许我们直接调用该方法&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hello&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;world&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;hello &quot;&lt;/span&gt; + world);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hello(&lt;span class=&quot;string&quot;&gt;&#39;world&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//Window&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://9240.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>js中apply,call,和bind函数</title>
    <link href="https://9240.github.io/2019/05/02/js%E4%B8%ADapply,call,%E5%92%8Cbind%E5%87%BD%E6%95%B0/"/>
    <id>https://9240.github.io/2019/05/02/js中apply,call,和bind函数/</id>
    <published>2019-05-01T16:00:00.000Z</published>
    <updated>2019-11-01T15:54:35.658Z</updated>
    
    <content type="html"><![CDATA[<p>apply()，call()，和bind()都是用来改变函数执行时的上下文，也就是改变this的指向问题，是prototype的方法，引入是因为js没有将this设置成形参。一般都是库里面用，不推荐自己使用call和apply。<br>call()和apply()唯一区别是参数不一样，call()是apply()的语法糖；<br>bind()是返回一个新函数，相比其他两个比较常用。而apply()和call()是立即调用。<br><a id="more"></a><br>如果不需要关心具体有多少参数被传入函数，选用apply()；<br>如果确定函数可接收多少个参数，用call()；<br>如果我们想要之后再调用方法，不需立即得到函数返回结果，使用bind();</p><h2 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h2><p>使用 apply， 你可以继承其他对象的方法：<br>这里apply()的第一个参数是函数运行时使用的 this 值，在非严格模式下，第一个参数为null或者undefined时会自动替换为指向全局对象，apply()的第二个参数为数组或类数组。</p><h2 id="call"><a href="#call" class="headerlink" title="call()"></a>call()</h2><p>call()是apply()的语法糖，作用和apply()一样，同样可实现继承，唯一的区别就在于call()接收的是参数列表，而apply()则接收参数数组。</p><h2 id="bind"><a href="#bind" class="headerlink" title="bind()"></a>bind()</h2><p>bind()的作用与call()和apply()一样，都是可以改变函数运行时上下文，区别是call()和apply()在调用函数之后会立即执行，而bind()方法调用并改变函数运行时上下文后，返回一个新的函数，并未执行。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;apply()，call()，和bind()都是用来改变函数执行时的上下文，也就是改变this的指向问题，是prototype的方法，引入是因为js没有将this设置成形参。一般都是库里面用，不推荐自己使用call和apply。&lt;br&gt;call()和apply()唯一区别是参数不一样，call()是apply()的语法糖；&lt;br&gt;bind()是返回一个新函数，相比其他两个比较常用。而apply()和call()是立即调用。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://9240.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>力软前端组件</title>
    <link href="https://9240.github.io/2019/04/10/%E5%8A%9B%E8%BD%AF%E5%89%8D%E7%AB%AF%E7%BB%84%E4%BB%B6/"/>
    <id>https://9240.github.io/2019/04/10/力软前端组件/</id>
    <published>2019-04-09T16:00:00.000Z</published>
    <updated>2020-03-04T08:42:31.881Z</updated>
    
    <content type="html"><![CDATA[<p>我看到的力软敏捷开发框架的文档写的相当简洁，且只有部分组件的文档。为了以后加入的伙伴能更快的上手，也为了自己提升开发效率，于是对着源代码写了下面的文档，由于项目需要，部分组件进行了细微修改，另外由于其他原因，所有组件名都更改为waxxx字样。</p><center><img src="https://images.pexels.com/photos/2089379/pexels-photo-2089379.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=1&amp;w=500" alt></center><h2 id="一-时间查询框"><a href="#一-时间查询框" class="headerlink" title="一.时间查询框"></a>一.时间查询框</h2><p><strong>方法：$(‘#id’).wadate(op);</strong><br><a id="more"></a></p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th><th style="text-align:center">默认</th></tr></thead><tbody><tr><td style="text-align:center">dfdata</td><td style="text-align:center">自定义数据</td><td style="text-align:center">[]</td></tr><tr><td style="text-align:center">mShow</td><td style="text-align:center">是否显示当月按钮</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">premShow</td><td style="text-align:center">是否显示上月按钮</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">jShow</td><td style="text-align:center">是否显示当季度按钮</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">prejShow</td><td style="text-align:center">是否显示上季度按钮</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">premShow</td><td style="text-align:center">是否显示上月按钮</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">ysShow</td><td style="text-align:center">是否显示上半年按钮</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">yxShow</td><td style="text-align:center">是否显示下半年按钮</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">preyShow</td><td style="text-align:center">是否显示去年按钮</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">yShow</td><td style="text-align:center">是否显示今年按钮</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">dfvalue</td><td style="text-align:center">默认选择值</td><td style="text-align:center">未选择[preM/currentM/preJ/currentJ/yS/yX/preY/currentY/zhua]</td></tr><tr><td style="text-align:center">selectfn</td><td style="text-align:center">选择后回调函数</td><td style="text-align:center">false</td></tr></tbody></table><p><strong>代码示例：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#id"</span>).wadate(&#123;</span><br><span class="line"> dfdata: [</span><br><span class="line"> &#123; <span class="attr">name</span>: <span class="string">'今天'</span>, <span class="attr">begin</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> learun.getDate(<span class="string">'yyyy-MM-dd 00:00:00'</span>) &#125;, <span class="attr">end</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> learun.getDate(<span class="string">'yyyy-MM-dd 23:59:59'</span>) &#125; &#125;,</span><br><span class="line"> &#123; <span class="attr">name</span>: <span class="string">'近7天'</span>, <span class="attr">begin</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> learun.getDate(<span class="string">'yyyy-MM-dd 00:00:00'</span>, <span class="string">'d'</span>, <span class="number">-6</span>) &#125;, <span class="attr">end</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> learun.getDate(<span class="string">'yyyy-MM-dd 23:59:59'</span>) &#125; &#125;,</span><br><span class="line"> &#123; <span class="attr">name</span>: <span class="string">'近1个月'</span>, <span class="attr">begin</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> learun.getDate(<span class="string">'yyyy-MM-dd 00:00:00'</span>, <span class="string">'m'</span>, <span class="number">-1</span>) &#125;, <span class="attr">end</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> learun.getDate(<span class="string">'yyyy-MM-dd 23:59:59'</span>) &#125; &#125;,</span><br><span class="line"> &#123; <span class="attr">name</span>: <span class="string">'近3个月'</span>, <span class="attr">begin</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> learun.getDate(<span class="string">'yyyy-MM-dd 00:00:00'</span>, <span class="string">'m'</span>, <span class="number">-3</span>) &#125;, <span class="attr">end</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> learun.getDate(<span class="string">'yyyy-MM-dd 23:59:59'</span>) &#125; &#125;,</span><br><span class="line"> ],</span><br><span class="line"> mShow: <span class="literal">false</span>,</span><br><span class="line"> premShow: <span class="literal">false</span>,</span><br><span class="line"> jShow: <span class="literal">false</span>,</span><br><span class="line"> prejShow: <span class="literal">false</span>,</span><br><span class="line"> ysShow: <span class="literal">false</span>,</span><br><span class="line"> yxShow: <span class="literal">false</span>,</span><br><span class="line"> preyShow: <span class="literal">false</span>,</span><br><span class="line"> yShow: <span class="literal">false</span>,</span><br><span class="line"> dfvalue: <span class="string">'1'</span>,</span><br><span class="line"> selectfn: <span class="function"><span class="keyword">function</span> (<span class="params">begin, end</span>) </span>&#123;</span><br><span class="line"> logbegin = begin;</span><br><span class="line"> logend = end;</span><br><span class="line"> page.search();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><h2 id="二-下拉选择框"><a href="#二-下拉选择框" class="headerlink" title="二.下拉选择框"></a>二.下拉选择框</h2><p><strong>方法：$(‘#id’).waselect(op);</strong></p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th><th style="text-align:center">默认</th></tr></thead><tbody><tr><td style="text-align:center">placeholder</td><td style="text-align:center">占位符</td><td style="text-align:center">请选择</td></tr><tr><td style="text-align:center">type</td><td style="text-align:center">数据展示类型1.default：普通；2.tree：树形数据；3.treemultiple：树形多选；multiple：普通多选</td><td style="text-align:center">default</td></tr><tr><td style="text-align:center">value</td><td style="text-align:center">数据值字段名</td><td style="text-align:center">id</td></tr><tr><td style="text-align:center">text</td><td style="text-align:center">数据显示字段名</td><td style="text-align:center">text</td></tr><tr><td style="text-align:center">title</td><td style="text-align:center">数据标题字段名</td><td style="text-align:center">title</td></tr><tr><td style="text-align:center">maxHeight</td><td style="text-align:center">下拉框最大高度</td><td style="text-align:center">200</td></tr><tr><td style="text-align:center">width</td><td style="text-align:center">下拉框宽度</td><td style="text-align:center">跟随输入框宽度</td></tr><tr><td style="text-align:center">allowSearch</td><td style="text-align:center">是否允许搜索</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">url</td><td style="text-align:center">获取数据地址</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">data</td><td style="text-align:center">下拉选择数据</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">param</td><td style="text-align:center">请求后台参数</td><td style="text-align:center">Null</td></tr><tr><td style="text-align:center">method</td><td style="text-align:center">请求后台方法：GET、POST</td><td style="text-align:center">GET</td></tr><tr><td style="text-align:center">select</td><td style="text-align:center">选择后回调函数</td><td style="text-align:center">false</td></tr></tbody></table><h2 id="三-树形插件"><a href="#三-树形插件" class="headerlink" title="三.树形插件"></a>三.树形插件</h2><p><strong>方法：$(‘#id’).watree(op);</strong></p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th><th style="text-align:center">默认</th></tr></thead><tbody><tr><td style="text-align:center">icons</td><td style="text-align:center">图标</td><td style="text-align:center">checkbox_0.png[checkbox_0.png/checkbox_1.png/checkbox_2.png]</td></tr><tr><td style="text-align:center">method</td><td style="text-align:center">请求后台方法：GET、POST</td><td style="text-align:center">GET</td></tr><tr><td style="text-align:center">url</td><td style="text-align:center">请求后台地址</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">param</td><td style="text-align:center">请求参数</td><td style="text-align:center">Null</td></tr><tr><td style="text-align:center">data</td><td style="text-align:center">数据集</td><td style="text-align:center">[]</td></tr><tr><td style="text-align:center">isAllExpand</td><td style="text-align:center">节点是否展开</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">cbiconpath</td><td style="text-align:center">节点前的图标路径</td><td style="text-align:center">/Content/images/wayperfecttree/</td></tr><tr><td style="text-align:center">nodeClick</td><td style="text-align:center">点击事件</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">nodeCheck</td><td style="text-align:center">选中事件</td><td style="text-align:center">false</td></tr></tbody></table><p><strong>代码示例：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#id'</span>).watree(&#123;</span><br><span class="line">url: top.$.rootUrl + <span class="string">'/LR_OrganizationModule/Company/GetTree'</span>,</span><br><span class="line">icons:<span class="string">""</span>,</span><br><span class="line">method:<span class="string">"GET"</span>,</span><br><span class="line">isAllExpand:<span class="literal">false</span>,</span><br><span class="line">cbiconpath:<span class="string">""</span>,</span><br><span class="line">param: &#123; &#125;,</span><br><span class="line">nodeClick:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">nodeCheck:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong>data数据格式</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">id,</span><br><span class="line">text,显示数据</span><br><span class="line">value,选中值</span><br><span class="line">showcheck,bool,是否显示多选框</span><br><span class="line">checkstate,int,选中状态 <span class="number">0</span>未选中 <span class="number">1</span>选中</span><br><span class="line">hasChildren,bool,是否有子节点</span><br><span class="line">isexpand,bool,是否展开</span><br><span class="line">complete,bool</span><br><span class="line">ChildNodes,[],子节点数据</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></p><p><strong>拓展方法 $(‘#id’).watreeSet(name,op)（具体使用参照源码）;</strong></p><table><thead><tr><th style="text-align:center">name可选值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">allNoCheck</td><td style="text-align:center">获取未选中项</td></tr><tr><td style="text-align:center">allCheck</td><td style="text-align:center">获取选中项</td></tr><tr><td style="text-align:center">setCheck</td><td style="text-align:center">置为选中</td></tr><tr><td style="text-align:center">setValue</td><td style="text-align:center">设置value</td></tr><tr><td style="text-align:center">currentItem</td><td style="text-align:center">获取当前选中item</td></tr><tr><td style="text-align:center">getCheckNodesEx</td><td style="text-align:center">获取最下面的选中项</td></tr><tr><td style="text-align:center">getCheckNodeIds</td><td style="text-align:center">获取选中id,返回数组格式</td></tr><tr><td style="text-align:center">search</td><td style="text-align:center">节点搜索</td></tr><tr><td style="text-align:center">refresh</td><td style="text-align:center">刷新树结构</td></tr><tr><td style="text-align:center">getCheckNodeIdsByPath</td><td style="text-align:center">(当前版本未实现)</td></tr><tr><td style="text-align:center">addNode</td><td style="text-align:center">添加节点(当前版本未实现)</td></tr><tr><td style="text-align:center">updateNode</td><td style="text-align:center">更新节点(当前版本未实现)</td></tr></tbody></table><h2 id="四-表格插件"><a href="#四-表格插件" class="headerlink" title="四.表格插件"></a>四.表格插件</h2><p><strong>方法：$(“#id”).jfGrid(op);</strong></p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th><th style="text-align:center">默认</th></tr></thead><tbody><tr><td style="text-align:center">url</td><td style="text-align:center">数据服务地址</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">param</td><td style="text-align:center">请求参数</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">rowdatas</td><td style="text-align:center">列表数据</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">subGridData</td><td style="text-align:center">子列表数据</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">datatype</td><td style="text-align:center">数据类型</td><td style="text-align:center">array</td></tr><tr><td style="text-align:center">headData</td><td style="text-align:center">表格列数据</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">isShowNum</td><td style="text-align:center">是否显示序号</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">isMultiselect</td><td style="text-align:center">是否允许多选</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">multiselectfield</td><td style="text-align:center">多选绑定字段</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">isSubGrid</td><td style="text-align:center">是否有子表</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">subGridRowExpanded</td><td style="text-align:center">子表展开后回调函数</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">subGridHeight</td><td style="text-align:center">子表高度</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">onSelectRow</td><td style="text-align:center">选中一行后回调函数</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">onRenderComplete</td><td style="text-align:center">表格加载完后调用</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">isPage</td><td style="text-align:center">是否分页</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">sort</td><td style="text-align:center">是否排序</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">sidx</td><td style="text-align:center">排序字段</td><td style="text-align:center">‘’</td></tr><tr><td style="text-align:center">sord</td><td style="text-align:center">排序方式</td><td style="text-align:center">ASC</td></tr><tr><td style="text-align:center">isTree</td><td style="text-align:center">是否树形显示（没有分页的情况下才支持）</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">mainId</td><td style="text-align:center">关联的主键</td><td style="text-align:center">id</td></tr><tr><td style="text-align:center">parentId</td><td style="text-align:center">树形关联字段</td><td style="text-align:center">parentId</td></tr><tr><td style="text-align:center">reloadSelected</td><td style="text-align:center">刷新后是否还选择之前选中的,只支持单选</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">isAutoHeight</td><td style="text-align:center">自动适应表格高度</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">footerrow</td><td style="text-align:center">底部合计条</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">isEidt</td><td style="text-align:center">是否编辑</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">minheight</td><td style="text-align:center">最低高度</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">height</td><td style="text-align:center">高度</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">isStatistics</td><td style="text-align:center">统计条</td><td style="text-align:center">false</td></tr></tbody></table><p><strong>data数据格式</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">page:<span class="number">1</span>,页码</span><br><span class="line">records:<span class="number">722</span>,数据条数</span><br><span class="line">rows:[],展示的数据</span><br><span class="line">total：<span class="number">15</span>,页数</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></p><p><strong>拓展方法1:$(‘#id’).jfGridSet(name,op)（具体使用参照源码）;</strong></p><table><thead><tr><th style="text-align:center">name可选值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">reload</td><td style="text-align:center">刷新表格</td></tr><tr><td style="text-align:center">refreshdata</td><td style="text-align:center">更新数据</td></tr><tr><td style="text-align:center">addRow</td><td style="text-align:center">添加行</td></tr><tr><td style="text-align:center">updateRow</td><td style="text-align:center">更新（修改）行</td></tr><tr><td style="text-align:center">removeRow</td><td style="text-align:center">移除（删除）行</td></tr></tbody></table><p><strong>拓展方法2:$(‘#id’).jfGridGet(name)（具体使用参照源码）;</strong></p><table><thead><tr><th style="text-align:center">name可选值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">rowdata</td><td style="text-align:center">返回选中行</td></tr><tr><td style="text-align:center">rowdatas</td><td style="text-align:center">返回表格所有数据（当前页）</td></tr><tr><td style="text-align:center">rowdatasByArray</td><td style="text-align:center">树形结构转数组</td></tr><tr><td style="text-align:center">settingInfo</td><td style="text-align:center">返回表格所有信息</td></tr><tr><td style="text-align:center">showData</td><td style="text-align:center">返回当前页可见的所有数据（1,2,5区别）</td></tr></tbody></table><h2 id="五-弹框组件-wa-layer-js"><a href="#五-弹框组件-wa-layer-js" class="headerlink" title="五.弹框组件(wa-layer.js)"></a>五.弹框组件(wa-layer.js)</h2><p>1.询问框</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th><th style="text-align:center">默认</th></tr></thead><tbody><tr><td style="text-align:center">msg</td><td style="text-align:center">询问框的展示信息</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">callback</td><td style="text-align:center">关闭时的回调函数</td></tr></tbody></table><p><strong>代码示例：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layerConfirm(<span class="string">"提示信息"</span>，<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>2.自定义表单弹层</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th><th style="text-align:center">默认</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">id</td><td style="text-align:center">null</td></tr><tr><td style="text-align:center">title</td><td style="text-align:center">标题</td><td style="text-align:center">系统窗口</td></tr><tr><td style="text-align:center">width</td><td style="text-align:center">宽度</td><td style="text-align:center">550</td></tr><tr><td style="text-align:center">height</td><td style="text-align:center">高度</td><td style="text-align:center">400</td></tr><tr><td style="text-align:center">url</td><td style="text-align:center">弹框页面url</td><td style="text-align:center">error</td></tr><tr><td style="text-align:center">btn</td><td style="text-align:center">页面底部按钮</td><td style="text-align:center">[‘确认’,’关闭’]</td></tr><tr><td style="text-align:center">callBack</td><td style="text-align:center">第一个按钮点击的回调函数</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">maxmin</td><td style="text-align:center">是否允许最大最小</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">end</td><td style="text-align:center">窗体关闭后的回调函数</td><td style="text-align:center">false</td></tr></tbody></table><p><strong>代码示例：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wayperfect.layerForm(&#123;</span><br><span class="line">    id: <span class="string">'form'</span>,</span><br><span class="line">    title: <span class="string">'新增'</span>,</span><br><span class="line">    url: top.$.rootUrl + <span class="string">'/WA_CodeDemo/Consumer/Form'</span>,</span><br><span class="line">    width: <span class="number">600</span>,</span><br><span class="line">    height: <span class="number">400</span>,</span><br><span class="line">    callBack: <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top[id].acceptClick(refreshGirdData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="六-日期组件-wa-data-js"><a href="#六-日期组件-wa-data-js" class="headerlink" title="六.日期组件(wa-data.js)"></a>六.日期组件(wa-data.js)</h2><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center">parseDate(strDate)</td><td style="text-align:center">字串转化成日期</td><td style="text-align:center">wayperfect.parseDate(“2019-02-20”)</td></tr><tr><td style="text-align:center">formatDate(v, format)</td><td style="text-align:center">日期格式化v日期,format:格式</td><td style="text-align:center">wayperfect.formatDate(‘/Date(1550646100652)/‘,”yyyy-MM-dd-hh:mm:ss”)</td></tr><tr><td style="text-align:center">getDate(format, strInterval, Number)</td><td style="text-align:center">获取当前时间,format为格式,strInterval为[s,n,h,d,w,q,m,y],strInterval增加的数（可负）</td><td style="text-align:center">wayperfect.getDate(“yyyy-MM-dd-hh:mm:ss”,’d’,-3)</td></tr><tr><td style="text-align:center">getMonth()</td><td style="text-align:center">当前月的开始时间与结束时间</td><td style="text-align:center">null</td></tr><tr><td style="text-align:center">getPreMonth()</td><td style="text-align:center">上个月的开始与结束时间</td><td style="text-align:center">null</td></tr><tr><td style="text-align:center">getCurrentQuarter()</td><td style="text-align:center">当前季度的开始与结束时间</td><td style="text-align:center">null</td></tr><tr><td style="text-align:center">getPreQuarter()</td><td style="text-align:center">上个季度的开始与结束时间</td><td style="text-align:center">null</td></tr><tr><td style="text-align:center">getQuarter(Year, month)</td><td style="text-align:center">指定Year,month所在季度的开始与结束时间</td><td style="text-align:center">wayperfect.getQuarter(2019,8)</td></tr><tr><td style="text-align:center">getYear()</td><td style="text-align:center">当前年份的开始时间与结束时间</td><td style="text-align:center">null</td></tr><tr><td style="text-align:center">getPreYear()</td><td style="text-align:center">上一年份的开始时间与结束时间</td><td style="text-align:center">null</td></tr><tr><td style="text-align:center">getFirstHalfYear()</td><td style="text-align:center">当前年份的上半年开始时间与结束时间</td><td style="text-align:center">null</td></tr><tr><td style="text-align:center">getSecondHalfYear()</td><td style="text-align:center">当前年份的下半年开始时间与结束时间</td><td style="text-align:center">null</td></tr></tbody></table><h3 id="原型链上添加的四个方法"><a href="#原型链上添加的四个方法" class="headerlink" title="原型链上添加的四个方法"></a>原型链上添加的四个方法</h3><ul><li>日期计算：DateAdd(strInterval,Number)</li><li>比较日期差 dtEnd 格式为日期型或者 有效日期格式字符串：DateDiff（strInterval,dtEnd）</li><li>取得当前日期所在月的最大天数：MaxDayOfDate()</li><li>判断闰年：isLeapYear（）</li></ul><h2 id="七-ajax操作方法（wa-ajax-js）"><a href="#七-ajax操作方法（wa-ajax-js）" class="headerlink" title="七.ajax操作方法（wa-ajax.js）"></a>七.ajax操作方法（wa-ajax.js）</h2><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">httpErrorLog</td><td style="text-align:center">通信异常调用</td></tr><tr><td style="text-align:center">httpCode</td><td style="text-align:center">http请求返回数据码</td></tr><tr><td style="text-align:center">httpAsyncGet(url,callback)</td><td style="text-align:center">get请求方法（异步）:url地址,callback回调函数</td></tr><tr><td style="text-align:center">httpGet(url,param)</td><td style="text-align:center">get请求方法（同步）:url地址,param参数</td></tr><tr><td style="text-align:center">httpAsyncPost(url,param,callback)</td><td style="text-align:center">post请求方法（异步）:url地址,param参数,callback回调函数</td></tr><tr><td style="text-align:center">httpPost(url,param,callback)</td><td style="text-align:center">post请求方法（同步步）:url地址,param参数,callback回调函数</td></tr><tr><td style="text-align:center">httpAsync(type,url,param,callback)</td><td style="text-align:center">ajax 异步封装</td></tr><tr><td style="text-align:center">deleteForm(url,param,callback)</td><td style="text-align:center">异步post删除数据</td></tr><tr><td style="text-align:center">postForm(url,param,callback)</td><td style="text-align:center">异步post提交数据</td></tr></tbody></table><h2 id="八-基础操作类（wa-base-js）"><a href="#八-基础操作类（wa-base-js）" class="headerlink" title="八.基础操作类（wa-base.js）"></a>八.基础操作类（wa-base.js）</h2><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">newGuid</td><td style="text-align:center">返回一个32位的字符串</td></tr><tr><td style="text-align:center">loading(isShow,text)</td><td style="text-align:center">加载提示</td></tr><tr><td style="text-align:center">loadstyles(url)</td><td style="text-align:center">动态加载css文件</td></tr><tr><td style="text-align:center">iframe(Id,_frames)</td><td style="text-align:center">获取iframe</td></tr><tr><td style="text-align:center">changeUrlParam(url,key,value)</td><td style="text-align:center">改变url参数值</td></tr><tr><td style="text-align:center">toDecimal(num)</td><td style="text-align:center">把num转化为10进制</td></tr><tr><td style="text-align:center">countFileSize(size)</td><td style="text-align:center">文件大小转换(byte转成KB，MB，GB)</td></tr><tr><td style="text-align:center">arrayCopy(data)</td><td style="text-align:center">数组复制</td></tr><tr><td style="text-align:center">checkrow（id）</td><td style="text-align:center">检测数据是否选中</td></tr><tr><td style="text-align:center">alert.[success，info，warning，error] (msg)</td><td style="text-align:center">提示消息</td></tr><tr><td style="text-align:center">download(options)</td><td style="text-align:center">下载文件options={method,url,param},默认GET</td></tr><tr><td style="text-align:center">commafy(num)</td><td style="text-align:center">数字格式转换成千分位</td></tr></tbody></table><hr><h2 id="九-表单验证（wa-validator-helper-js）"><a href="#九-表单验证（wa-validator-helper-js）" class="headerlink" title="九.表单验证（wa-validator-helper.js）"></a>九.表单验证（wa-validator-helper.js）</h2><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">isNotNull(obj)</td><td style="text-align:center">验证不为空</td></tr><tr><td style="text-align:center">isNum(obj)</td><td style="text-align:center">验证数字</td></tr><tr><td style="text-align:center">isNumOrNull(obj)</td><td style="text-align:center">验证数字 或者 空</td></tr><tr><td style="text-align:center">isEmail(obj)</td><td style="text-align:center">验证Email</td></tr><tr><td style="text-align:center">isEmailOrNull</td><td style="text-align:center">Email验证 email   或者null,空</td></tr><tr><td style="text-align:center">isEnglishStr(obj)</td><td style="text-align:center">验证只能输入英文字符串</td></tr><tr><td style="text-align:center">isEnglishStrOrNull(obj)</td><td style="text-align:center">验证只能输入英文字符串 或者null,空</td></tr><tr><td style="text-align:center">isTelephone(obj)</td><td style="text-align:center">验证是否电话号码 phone</td></tr><tr><td style="text-align:center">isTelephoneOrNull(obj)</td><td style="text-align:center">验证是否电话号码 phone或者null,空</td></tr><tr><td style="text-align:center">isMobile(obj)</td><td style="text-align:center">验证是否手机号 mobile</td></tr><tr><td style="text-align:center">isMobileOrnull(obj)</td><td style="text-align:center">验证是否手机号 mobile或者null,空</td></tr><tr><td style="text-align:center">isMobileOrPhone(obj)</td><td style="text-align:center">验证是否手机号或电话号码 mobile phone</td></tr><tr><td style="text-align:center">isMobileOrPhoneOrNull(obj)</td><td style="text-align:center">验证是否手机号或电话号码 mobile phone或者null,空</td></tr><tr><td style="text-align:center">isUri(obj)</td><td style="text-align:center">验证网址 uri</td></tr><tr><td style="text-align:center">isUriOrNull(obj)</td><td style="text-align:center">验证网址 uri或者null,空</td></tr><tr><td style="text-align:center">isDate(obj)</td><td style="text-align:center">判断日期类型是否为YYYY-MM-DD格式的类型 date</td></tr><tr><td style="text-align:center">isDateOrNull(obj)</td><td style="text-align:center">判断日期类型是否为YYYY-MM-DD格式的类型 date或者null,空</td></tr><tr><td style="text-align:center">isDateTime(obj)</td><td style="text-align:center">判断日期类型是否为YYYY-MM-DD hh:mm:ss格式的类型 datetime</td></tr><tr><td style="text-align:center">isDateTimeOrNull(obj)</td><td style="text-align:center">判断日期类型是否为YYYY-MM-DD hh:mm:ss格式的类型 datetime或者null,空</td></tr><tr><td style="text-align:center">isTime(obj)</td><td style="text-align:center">判断日期类型是否为hh:mm:ss格式的类型 time</td></tr><tr><td style="text-align:center">isTimeOrNull(obj)</td><td style="text-align:center">判断日期类型是否为hh:mm:ss格式的类型 time或者null,空</td></tr><tr><td style="text-align:center">isChinese(obj)</td><td style="text-align:center">判断输入的字符是否为中文</td></tr><tr><td style="text-align:center">isChineseOrNull(obj)</td><td style="text-align:center">判断输入的字符是否为中文 cchar或者null,空</td></tr><tr><td style="text-align:center">isZip(obj)</td><td style="text-align:center">判断输入的邮编(只能为六位)是否正确 zip</td></tr><tr><td style="text-align:center">isZipOrNull(obj)</td><td style="text-align:center">判断输入的邮编(只能为六位)是否正确 zip或者null,空</td></tr><tr><td style="text-align:center">isDouble(obj)</td><td style="text-align:center">判断输入的字符是否为双精度 double</td></tr><tr><td style="text-align:center">isDoubleOrNull(obj)</td><td style="text-align:center">判断输入的字符是否为双精度 double或者null,空</td></tr><tr><td style="text-align:center">isIDCard(obj)</td><td style="text-align:center">判断是否为身份证 idcard</td></tr><tr><td style="text-align:center">isIDCardOrNull(obj)</td><td style="text-align:center">判断是否为身份证 idcard或者null,空</td></tr><tr><td style="text-align:center">isIP(obj)</td><td style="text-align:center">判断是否为IP地址格式</td></tr><tr><td style="text-align:center">isIPOrNull(obj)</td><td style="text-align:center">判断是否为IP地址格式 或者null,空</td></tr><tr><td style="text-align:center">isLenNum(obj,n)</td><td style="text-align:center">验证是否是n位数字字符串编号 nnum</td></tr><tr><td style="text-align:center">isLenNumOrNull(obj,n)</td><td style="text-align:center">验证是否是n位数字字符串编号 nnum或者null,空</td></tr><tr><td style="text-align:center">isLenStr(obj,n)</td><td style="text-align:center">验证是否小于等于n位数的字符串 nchar</td></tr><tr><td style="text-align:center">isLenStrOrNull(obj,n)</td><td style="text-align:center">验证是否小于等于n位数的字符串 nchar或者null,空</td></tr></tbody></table><h2 id="十-右键插件（contextmenu）"><a href="#十-右键插件（contextmenu）" class="headerlink" title="十.右键插件（contextmenu）"></a>十.右键插件（contextmenu）</h2><p><strong>示例</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#girdtable"</span>).wacontextmenu(&#123;</span><br><span class="line">    menulist: [</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">"复制"</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">"粘贴"</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">    before:<span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="十一-弹层选择控件（formselect）"><a href="#十一-弹层选择控件（formselect）" class="headerlink" title="十一.弹层选择控件（formselect）"></a>十一.弹层选择控件（formselect）</h2><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th><th style="text-align:center">默认</th></tr></thead><tbody><tr><td style="text-align:center">placeholder</td><td style="text-align:center">默认展示字样</td><td style="text-align:center">“请选择”</td></tr><tr><td style="text-align:center">icon</td><td style="text-align:center">图标</td><td style="text-align:center">“fa-plus”</td></tr><tr><td style="text-align:center">layerUrl</td><td style="text-align:center">弹层地址</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">layerParam</td><td style="text-align:center">弹层参数</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">layerUrlW</td><td style="text-align:center">弹层宽度</td><td style="text-align:center">600</td></tr><tr><td style="text-align:center">layerUrlH</td><td style="text-align:center">弹层高度</td><td style="text-align:center">400</td></tr><tr><td style="text-align:center">dataUrl</td><td style="text-align:center">获取数据地址</td><td style="text-align:center">null</td></tr><tr><td style="text-align:center">select</td><td style="text-align:center">选择事件</td><td style="text-align:center">false</td></tr></tbody></table><p><strong>示例代码:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#id'</span>).waformselect(&#123;</span><br><span class="line">    placeholder: <span class="string">'请选择'</span>,</span><br><span class="line">    layerUrl: top.$.rootUrl + <span class="string">'/WA_SystemModule/DataSource/SelectForm'</span>,</span><br><span class="line">    layerUrlH: <span class="number">500</span>,</span><br><span class="line">    layerUrlW: <span class="number">800</span>,</span><br><span class="line">    dataUrl: top.$.rootUrl + <span class="string">'/WA_SystemModule/DataSource/GetNameByCode'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="十二-wayperfectSelect（普通，多选，树形数据，gird，搜索，输入框选择器）"><a href="#十二-wayperfectSelect（普通，多选，树形数据，gird，搜索，输入框选择器）" class="headerlink" title="十二.wayperfectSelect（普通，多选，树形数据，gird，搜索，输入框选择器）"></a>十二.wayperfectSelect（普通，多选，树形数据，gird，搜索，输入框选择器）</h2><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th><th style="text-align:center">默认</th></tr></thead><tbody><tr><td style="text-align:center">placeholder</td><td style="text-align:center">默认展示字样</td><td style="text-align:center">“请选择”</td></tr><tr><td style="text-align:center">type</td><td style="text-align:center">类型可选[default,tree,treemultiple,gird,multiple]</td><td style="text-align:center">default</td></tr><tr><td style="text-align:center">maxHeight</td><td style="text-align:center">展开最大高度</td><td style="text-align:center">200</td></tr><tr><td style="text-align:center">width</td><td style="text-align:center">宽度</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">allowSearch</td><td style="text-align:center">是否允许搜索</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">url</td><td style="text-align:center">数据接口</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">data</td><td style="text-align:center">数据集</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">param</td><td style="text-align:center">访问数据接口参数</td><td style="text-align:center">null</td></tr><tr><td style="text-align:center">method</td><td style="text-align:center">接口请求的方法</td><td style="text-align:center">“GET”</td></tr><tr><td style="text-align:center">select</td><td style="text-align:center">选择事件</td><td style="text-align:center">false</td></tr></tbody></table><p><strong>data数据格式(数组)</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">value:<span class="number">1</span>,</span><br><span class="line">text:<span class="string">"text"</span>,</span><br><span class="line">name:<span class="string">"xxx"</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></p><p>拓展了3个方法：waselectRefresh，waselectGet，waselectSet</p><h2 id="十三-wa-uploader-表单附件选择插件"><a href="#十三-wa-uploader-表单附件选择插件" class="headerlink" title="十三.wa-uploader 表单附件选择插件"></a>十三.wa-uploader 表单附件选择插件</h2><p><strong>代码示例：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"id"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">$("#id").waUploader()</span></span><br></pre></td></tr></table></figure></p><h2 id="十四-UE富文本编辑器"><a href="#十四-UE富文本编辑器" class="headerlink" title="十四.UE富文本编辑器"></a>十四.UE富文本编辑器</h2><p>引入ueditor.config.js、ueditor.all.js、zh-cn.js等js文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script id=<span class="string">"editor"</span> type=<span class="string">"text/plain"</span> style=<span class="string">"height:270px;"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="时间轴方法（降序）"><a href="#时间轴方法（降序）" class="headerlink" title="时间轴方法（降序）"></a>时间轴方法（降序）</h2><h2 id="自定义表单（custmerform）"><a href="#自定义表单（custmerform）" class="headerlink" title="自定义表单（custmerform）"></a>自定义表单（custmerform）</h2><h2 id="自定义查询（custmerquery）"><a href="#自定义查询（custmerquery）" class="headerlink" title="自定义查询（custmerquery）"></a>自定义查询（custmerquery）</h2><h2 id="即时聊天-系统内部通讯"><a href="#即时聊天-系统内部通讯" class="headerlink" title="即时聊天-系统内部通讯"></a>即时聊天-系统内部通讯</h2><h2 id="waLayout-页面布局插件（目前支持左右布局）"><a href="#waLayout-页面布局插件（目前支持左右布局）" class="headerlink" title="waLayout 页面布局插件（目前支持左右布局）"></a>waLayout 页面布局插件（目前支持左右布局）</h2><h2 id="工作流引擎api操作方法类"><a href="#工作流引擎api操作方法类" class="headerlink" title="工作流引擎api操作方法类"></a>工作流引擎api操作方法类</h2><h2 id="工作流绘制组件"><a href="#工作流绘制组件" class="headerlink" title="工作流绘制组件"></a>工作流绘制组件</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我看到的力软敏捷开发框架的文档写的相当简洁，且只有部分组件的文档。为了以后加入的伙伴能更快的上手，也为了自己提升开发效率，于是对着源代码写了下面的文档，由于项目需要，部分组件进行了细微修改，另外由于其他原因，所有组件名都更改为waxxx字样。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://images.pexels.com/photos/2089379/pexels-photo-2089379.jpeg?auto=compress&amp;amp;cs=tinysrgb&amp;amp;dpr=1&amp;amp;w=500&quot; alt&gt;&lt;/center&gt;

&lt;h2 id=&quot;一-时间查询框&quot;&gt;&lt;a href=&quot;#一-时间查询框&quot; class=&quot;headerlink&quot; title=&quot;一.时间查询框&quot;&gt;&lt;/a&gt;一.时间查询框&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;方法：$(‘#id’).wadate(op);&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="力软敏捷开发6.0" scheme="https://9240.github.io/tags/%E5%8A%9B%E8%BD%AF%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%916-0/"/>
    
  </entry>
  
  <entry>
    <title>mongodb基本操作</title>
    <link href="https://9240.github.io/2018/12/25/mongodb/"/>
    <id>https://9240.github.io/2018/12/25/mongodb/</id>
    <published>2018-12-24T16:00:00.000Z</published>
    <updated>2019-11-27T12:27:08.805Z</updated>
    
    <content type="html"><![CDATA[<p><center><img src="https://images.pexels.com/photos/875858/pexels-photo-875858.png?auto=compress&amp;cs=tinysrgb&amp;dpr=1&amp;w=500" alt></center></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1.下载安装"></a>1.下载安装</h3><p><a href="https://www.mongodb.com/" title="mongodb官网" target="_blank" rel="noopener">下载mongodb</a>，下载完，找到文件，双击，一路回车即可完成安装。</p><h3 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h3><p>复制mongodb安装的bin目录到系统变量path中。<br><a id="more"></a></p><h3 id="3-启动mongodb服务端"><a href="#3-启动mongodb服务端" class="headerlink" title="3.启动mongodb服务端"></a>3.启动mongodb服务端</h3><p>新建数据存储文件夹，执行命令行mongod –dbpath 文件夹，出现下图即服务端启动成功。</p><p><center><img src="https://blog.9240.fun/myblogpic/img/mongodb1.png" alt></center></p><h3 id="4-启动mongodb客户端"><a href="#4-启动mongodb客户端" class="headerlink" title="4.启动mongodb客户端"></a>4.启动mongodb客户端</h3><p>执行命令行mongo（mongo 127.0.0.1:27017）,出现下图即客户端启动成功。</p><p><center><img src="https://blog.9240.fun/myblogpic/img/mongodb2.png" alt></center></p><h3 id="5-准备工作做完，下面就可以愉快的敲代码了。"><a href="#5-准备工作做完，下面就可以愉快的敲代码了。" class="headerlink" title="5.准备工作做完，下面就可以愉快的敲代码了。"></a>5.准备工作做完，下面就可以愉快的敲代码了。</h3><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><h4 id="1-简单命令"><a href="#1-简单命令" class="headerlink" title="1.简单命令"></a>1.简单命令</h4><p>查看所有数据库列表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ show dbs</span><br></pre></td></tr></table></figure></p><p>查看当前数据库的集合<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ show collections</span><br></pre></td></tr></table></figure></p><p>使用数据库/创建数据库(创建操作时，需要往collections里插入数据才能创建成功)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ use dbname</span><br></pre></td></tr></table></figure></p><p>数据库集合中插入数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.collectionsname.insert(&#123;<span class="string">"name"</span>:<span class="string">"zhangsan"</span>,<span class="string">"age"</span>:21&#125;)</span><br></pre></td></tr></table></figure></p><p>查看数据库集合<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ show collections</span><br></pre></td></tr></table></figure></p><p>删除当前所在数据库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.dropDatabase()</span><br></pre></td></tr></table></figure></p><p>删除指定集合<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.collectionsname.drop()</span><br></pre></td></tr></table></figure></p><h4 id="2-数据查找"><a href="#2-数据查找" class="headerlink" title="2.数据查找"></a>2.数据查找</h4><p>1.查找指定集合（userinfo）中所有数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find()</span><br></pre></td></tr></table></figure></p><p>2.查询去掉后的当前聚集集合中的某列的重复数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.distinct(<span class="string">"name"</span>)</span><br></pre></td></tr></table></figure></p><p>3.查询 age = 22 的记录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userinfo.find(&#123;<span class="string">"age"</span>:22&#125;)</span><br></pre></td></tr></table></figure></p><p>4.查询 age &gt; 22 的记录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find(&#123;age: &#123;<span class="variable">$gt</span>: 22&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>5.查询 age &lt; 22 的记录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find(&#123;age: &#123;<span class="variable">$lt</span>: 22&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>6.查询 age &gt;= 25 的记录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find(&#123;age: &#123;<span class="variable">$gte</span>: 25&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>7.查询 age &lt;= 25 的记录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find(&#123;age: &#123;<span class="variable">$lte</span>: 25&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>8.查询 age &gt;= 23 并且 age &lt;= 26<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find(&#123;age: &#123;<span class="variable">$gte</span>: 23, <span class="variable">$lte</span>: 26&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>9.查询 name 中包含 mongo 的数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find(&#123;name: /mongo/&#125;)</span><br></pre></td></tr></table></figure></p><p>10.查询 name 中以 mongo 开头的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find(&#123;name: /^mongo/&#125;)</span><br></pre></td></tr></table></figure></p><p>11.查询指定列 name、age 数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find(&#123;&#125;, &#123;name: 1, age: 1&#125;)</span><br></pre></td></tr></table></figure></p><p>12.查询指定列 name、age 数据, age &gt; 25<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find(&#123;age: &#123;<span class="variable">$gt</span>: 25&#125;&#125;, &#123;name: 1, age: 1&#125;)</span><br></pre></td></tr></table></figure></p><p>13.按照年龄排序 1 升序 -1 降序<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find().sort(&#123;age: 1&#125;)</span><br></pre></td></tr></table></figure></p><p>14.查询 name = zhangsan, age = 22 的数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find(&#123;name: <span class="string">'zhangsan'</span>, age: 22&#125;)</span><br></pre></td></tr></table></figure></p><p>15.查询前 5 条数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find().<span class="built_in">limit</span>(5)</span><br></pre></td></tr></table></figure></p><p>16.查询 10 条以后的数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find().skip(10)</span><br></pre></td></tr></table></figure></p><p>17.查询在 5-10 之间的数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find().<span class="built_in">limit</span>(10).skip(5)</span><br></pre></td></tr></table></figure></p><p>18.or 与 查询<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find(&#123;<span class="variable">$or</span>: [&#123;age: 22&#125;, &#123;age: 25&#125;]&#125;)</span><br></pre></td></tr></table></figure></p><p>19.findOne 查询第一条数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.findOne()</span><br></pre></td></tr></table></figure></p><p>20.查询某个结果集的记录条数 统计数量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ db.userInfo.find(&#123;age: &#123;<span class="variable">$gte</span>: 25&#125;&#125;).count()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;img src=&quot;https://images.pexels.com/photos/875858/pexels-photo-875858.png?auto=compress&amp;amp;cs=tinysrgb&amp;amp;dpr=1&amp;amp;w=500&quot; alt&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;h3 id=&quot;1-下载安装&quot;&gt;&lt;a href=&quot;#1-下载安装&quot; class=&quot;headerlink&quot; title=&quot;1.下载安装&quot;&gt;&lt;/a&gt;1.下载安装&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.mongodb.com/&quot; title=&quot;mongodb官网&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载mongodb&lt;/a&gt;，下载完，找到文件，双击，一路回车即可完成安装。&lt;/p&gt;
&lt;h3 id=&quot;2-配置环境变量&quot;&gt;&lt;a href=&quot;#2-配置环境变量&quot; class=&quot;headerlink&quot; title=&quot;2.配置环境变量&quot;&gt;&lt;/a&gt;2.配置环境变量&lt;/h3&gt;&lt;p&gt;复制mongodb安装的bin目录到系统变量path中。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="mongodb" scheme="https://9240.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>gitbook简单使用</title>
    <link href="https://9240.github.io/2018/12/05/gitbook/"/>
    <id>https://9240.github.io/2018/12/05/gitbook/</id>
    <published>2018-12-04T16:00:00.000Z</published>
    <updated>2019-11-01T16:04:46.029Z</updated>
    
    <content type="html"><![CDATA[<p><center><img src="https://images.pexels.com/photos/733857/pexels-photo-733857.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=1&amp;w=500" alt></center></p><h2 id="gitbook简单介绍"><a href="#gitbook简单介绍" class="headerlink" title="gitbook简单介绍"></a>gitbook简单介绍</h2><p>gitbook是静态网页生成器，使用markdown语法。在2014年中发布第一个开源版本，在github上有20257个Star，他给自己的定位:现代而优雅，易于编辑，专为团队而建，智能见解，各种插件扩展GitBook。</p><h2 id="gitbook简单使用"><a href="#gitbook简单使用" class="headerlink" title="gitbook简单使用"></a>gitbook简单使用</h2><h3 id="1-在线编辑"><a href="#1-在线编辑" class="headerlink" title="1.在线编辑"></a>1.在线编辑</h3><p>1.登录之后，在spaces面板点击+Create a new space,输入项目名，title，logo等信息。<br>2.创建成功后，在spaces面板会出现刚刚创建的spaces，单击进去后，点击页面右下角的编辑图标即可编辑整个页面。<br>3.编辑完成后，单击页面右下角的保存图标。访问[username].gitbook.io/[projectname]即可。</p><h3 id="2-本地编辑"><a href="#2-本地编辑" class="headerlink" title="2.本地编辑"></a>2.本地编辑</h3><a id="more"></a><h4 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h4><p>1.下载安装node.js,链接：<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a><br>2.打开终端，任意目录下运行<code>npm install gitbook-cli -g</code>,全局安装gitbook脚手架。<br>3.新建一个文件夹，终端切换到该文件夹，运行<code>gitbook init</code>,初始化项目，会生成README.md(一个页面)和SUMMARY.md(目录文件)。<br>4.运行<code>gitbook serve</code>,然后访问localhost:4000/即可预览。</p><h4 id="添加文章"><a href="#添加文章" class="headerlink" title="添加文章"></a>添加文章</h4><p>1.项目根目录下，新建.md文件并编写内容。<br>2.在SUMMARY.md文件中添加第一步中新建文章的链接。<br>3.在终端中运行<code>gitbook serve</code>启动项目，访问localhost:4000/即可。</p><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>1.服务器上下载安装node.js,链接：<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a><br>2.服务器上打开终端，任意目录下运行<code>npm install gitbook-cli -g</code>,全局安装gitbook脚手架。<br>3.开启服务器4000端口。<br>4.把本地项目文件拷到服务器。<br>5.服务器终端运行<code>gitbook serve</code>，并常驻后台。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>1.<a href="https://9240.fun:4000" target="_blank" rel="noopener">9240.fun:4000</a><br>2.<a href="https://github.com/9240/gitBook.git" target="_blank" rel="noopener">代码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;img src=&quot;https://images.pexels.com/photos/733857/pexels-photo-733857.jpeg?auto=compress&amp;amp;cs=tinysrgb&amp;amp;dpr=1&amp;amp;w=500&quot; alt&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&quot;gitbook简单介绍&quot;&gt;&lt;a href=&quot;#gitbook简单介绍&quot; class=&quot;headerlink&quot; title=&quot;gitbook简单介绍&quot;&gt;&lt;/a&gt;gitbook简单介绍&lt;/h2&gt;&lt;p&gt;gitbook是静态网页生成器，使用markdown语法。在2014年中发布第一个开源版本，在github上有20257个Star，他给自己的定位:现代而优雅，易于编辑，专为团队而建，智能见解，各种插件扩展GitBook。&lt;/p&gt;
&lt;h2 id=&quot;gitbook简单使用&quot;&gt;&lt;a href=&quot;#gitbook简单使用&quot; class=&quot;headerlink&quot; title=&quot;gitbook简单使用&quot;&gt;&lt;/a&gt;gitbook简单使用&lt;/h2&gt;&lt;h3 id=&quot;1-在线编辑&quot;&gt;&lt;a href=&quot;#1-在线编辑&quot; class=&quot;headerlink&quot; title=&quot;1.在线编辑&quot;&gt;&lt;/a&gt;1.在线编辑&lt;/h3&gt;&lt;p&gt;1.登录之后，在spaces面板点击+Create a new space,输入项目名，title，logo等信息。&lt;br&gt;2.创建成功后，在spaces面板会出现刚刚创建的spaces，单击进去后，点击页面右下角的编辑图标即可编辑整个页面。&lt;br&gt;3.编辑完成后，单击页面右下角的保存图标。访问[username].gitbook.io/[projectname]即可。&lt;/p&gt;
&lt;h3 id=&quot;2-本地编辑&quot;&gt;&lt;a href=&quot;#2-本地编辑&quot; class=&quot;headerlink&quot; title=&quot;2.本地编辑&quot;&gt;&lt;/a&gt;2.本地编辑&lt;/h3&gt;
    
    </summary>
    
    
      <category term="gitbook" scheme="https://9240.github.io/tags/gitbook/"/>
    
  </entry>
  
  <entry>
    <title>vue传值</title>
    <link href="https://9240.github.io/2018/06/03/vue%E4%BC%A0%E5%80%BC/"/>
    <id>https://9240.github.io/2018/06/03/vue传值/</id>
    <published>2018-06-02T16:00:00.000Z</published>
    <updated>2019-11-01T16:13:39.240Z</updated>
    
    <content type="html"><![CDATA[<p><center><img src="https://images.pexels.com/photos/442600/pexels-photo-442600.jpeg?auto=compress&amp;cs=tinysrgb&amp;h=350" alt></center></p><h3 id="1-父组件向子组件传值-props"><a href="#1-父组件向子组件传值-props" class="headerlink" title="1. 父组件向子组件传值 (props)"></a>1. 父组件向子组件传值 (props)</h3><a id="more"></a><p>父组件</p><pre><code>&lt;template&gt;    &lt;nav id=&quot;navbar&quot;&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;router-link to=&apos;/child&apos; v-bind:message=&quot;title&quot;&gt;render函数&lt;/router-link&gt;            &lt;/li&gt;        &lt;/ul&gt;    &lt;/nav&gt;&lt;/template&gt;&lt;script&gt;    export default{        data(){            return {                title:&apos;传到子组件的值&apos;            }        }    }&lt;/script&gt;</code></pre><p>子组件</p><pre><code>&lt;template&gt;  &lt;div id=&quot;propsvalue&quot;&gt;     {{msg}}  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default { props:{   msg:{     type:String,     default:&quot;我是默认值&quot;   } }}&lt;/script&gt;</code></pre><h3 id="2-子组件向父组件传值-emit"><a href="#2-子组件向父组件传值-emit" class="headerlink" title="2. 子组件向父组件传值($emit)"></a>2. 子组件向父组件传值($emit)</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;app&quot;&gt;        &lt;h2 ref=&apos;mytitle&apos;&gt;{{msg}}&lt;/h2&gt;        &lt;child v-on:getchild=&apos;content&apos; v-bind:list=&apos;list&apos;&gt;&lt;/child&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;&lt;script&gt;    new Vue({        el:&apos;#app&apos;,        data(){            return{                msg:&apos;hello word&apos;            }        },        methods:{            content(str){                this.$refs.mytitle.innerHTML = str;            }        },        //子组件        components:{            &apos;child&apos;:{                data(){                    return{                        list:[&apos;第一项&apos;,&apos;第二项&apos;,&apos;第三项&apos;],                        childmsg:&apos;子组件的内容&apos;                    }                },                template:`                    &lt;div&gt;                        &lt;ul&gt;                            &lt;li v-for=&quot;(item,index) in list&quot; v-on:click=&apos;change&apos;&gt;{{item}}&lt;/li&gt;                        &lt;/ul&gt;                    &lt;/div&gt;                `,                methods:{                    change(e){                        this.$emit(&apos;getchild&apos;,e.target.innerText)                    }                }            }        }    })&lt;/script&gt;</code></pre><h3 id="3-非父子组件的传值-vue空实例"><a href="#3-非父子组件的传值-vue空实例" class="headerlink" title="3. 非父子组件的传值(vue空实例)"></a>3. 非父子组件的传值(vue空实例)</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;app&quot;&gt;        &lt;theheader&gt;&lt;/theheader&gt;        &lt;thelist&gt;&lt;/thelist&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;&lt;script&gt;    //vue空实例作为中间传达的工具    var vm = new Vue();    new Vue({        el:&apos;#app&apos;,        components:{            &apos;theheader&apos;:{                data(){                    return{                        msg:&apos;组件一&apos;                    }                },                template:`                    &lt;div&gt;                        &lt;h2&gt;{{msg}}&lt;/h2&gt;                    &lt;/div&gt;                `,                mounted(){                    //$on接收                    vm.$on(&apos;change&apos;,(str)=&gt;{                        this.msg = str                    })                }            },            &apos;thelist&apos;:{                data(){                    return{                        list:[&apos;第一项&apos;,&apos;第二项&apos;,&apos;第三项&apos;]                    }                },                template:`                    &lt;div&gt;                        &lt;ul&gt;                            &lt;li v-for=&quot;(item,index) in list&quot; v-on:click=&apos;getcontent&apos;&gt;{{item}}&lt;/li&gt;                        &lt;/ul&gt;                    &lt;/div&gt;                `,                methods:{                    getcontent(e){                        //$emit发布                        vm.$emit(&apos;change&apos;,e.target.innerHTML)                    }                }            }        }    })&lt;/script&gt;</code></pre><h3 id="当然，还有更好用的方式，使用vuex插件。"><a href="#当然，还有更好用的方式，使用vuex插件。" class="headerlink" title="当然，还有更好用的方式，使用vuex插件。"></a>当然，还有更好用的方式，使用vuex插件。</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;img src=&quot;https://images.pexels.com/photos/442600/pexels-photo-442600.jpeg?auto=compress&amp;amp;cs=tinysrgb&amp;amp;h=350&quot; alt&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-父组件向子组件传值-props&quot;&gt;&lt;a href=&quot;#1-父组件向子组件传值-props&quot; class=&quot;headerlink&quot; title=&quot;1. 父组件向子组件传值 (props)&quot;&gt;&lt;/a&gt;1. 父组件向子组件传值 (props)&lt;/h3&gt;
    
    </summary>
    
    
      <category term="vue" scheme="https://9240.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue生命周期</title>
    <link href="https://9240.github.io/2018/06/01/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://9240.github.io/2018/06/01/vue生命周期/</id>
    <published>2018-05-31T16:00:00.000Z</published>
    <updated>2019-11-01T16:07:04.603Z</updated>
    
    <content type="html"><![CDATA[<p>下图是Vue文档里关于实例生命周期的解释图</p><p><center><img src="https://cn.vuejs.org/images/lifecycle.png" height="50%" width="50%"></center></p><h3 id="先贴代码"><a href="#先贴代码" class="headerlink" title="先贴代码"></a>先贴代码</h3><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"changemsg"</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                msg:<span class="string">'vue生命周期'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            changemsg()&#123;</span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.msg = <span class="string">'我更新了'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeCreate()&#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">`msg: <span class="subst">$&#123;<span class="keyword">this</span>.msg&#125;</span>, el: <span class="subst">$&#123;<span class="keyword">this</span>.$el&#125;</span>`</span>)</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">"beforeCreate"</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        created()&#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">`msg: <span class="subst">$&#123;<span class="keyword">this</span>.msg&#125;</span>, el: <span class="subst">$&#123;<span class="keyword">this</span>.$el&#125;</span>`</span>)</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">"created"</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount()&#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">`msg: <span class="subst">$&#123;<span class="keyword">this</span>.msg&#125;</span>, el: <span class="subst">$&#123;<span class="keyword">this</span>.$el&#125;</span>`</span>)</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">"beforeMount"</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        mounted()&#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">`msg: <span class="subst">$&#123;<span class="keyword">this</span>.msg&#125;</span>, el: <span class="subst">$&#123;<span class="keyword">this</span>.$el&#125;</span>`</span>)</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">"mounted"</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate()&#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">`msg: <span class="subst">$&#123;<span class="keyword">this</span>.msg&#125;</span>, el: <span class="subst">$&#123;<span class="keyword">this</span>.$el&#125;</span>`</span>)</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">"beforeUpdate"</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        updated()&#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">`msg: <span class="subst">$&#123;<span class="keyword">this</span>.msg&#125;</span>, el: <span class="subst">$&#123;<span class="keyword">this</span>.$el&#125;</span>`</span>)</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">"updated"</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy()&#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">`msg: <span class="subst">$&#123;<span class="keyword">this</span>.msg&#125;</span>, el: <span class="subst">$&#123;<span class="keyword">this</span>.$el&#125;</span>`</span>)</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">"beforeDestroy"</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed()&#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">`msg: <span class="subst">$&#123;<span class="keyword">this</span>.msg&#125;</span>, el: <span class="subst">$&#123;<span class="keyword">this</span>.$el&#125;</span>`</span>)</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">"destroyed"</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><strong>beforeCreate：组件实例化之前执行,data和$el都是undefined</strong><br><center><img src="https://blog.9240.fun/myblogpic/img/beforeCreate.png" alt></center><br><br></li><li><strong>created：组件实例化完毕，但页面还未显示，data可以被访问</strong><br><center><img src="https://blog.9240.fun/myblogpic/img/created.png" alt></center><br><br></li><li><strong>beforeMount：组件挂载前，页面仍未展示，但虚拟DOM已经配置</strong><br><center><img src="https://blog.9240.fun/myblogpic/img/beforeMount.png" alt></center><br><br></li><li><strong>mounted：组件挂载后，此方法执行后，页面显示</strong><br><center><img src="https://blog.9240.fun/myblogpic/img/mounted1.png" alt></center><br><center><img src="https://blog.9240.fun/myblogpic/img/mounted2.png" alt></center><br><br></li><li><strong>beforeUpdate：组件更新前，页面仍未更新，但虚拟DOM已经配置</strong><br><center><img src="https://blog.9240.fun/myblogpic/img/beforeUpdate.png" alt></center><br><br></li><li><strong>update：组件更新，此方法执行后，页面显示</strong><br><center><img src="https://blog.9240.fun/myblogpic/img/updated1.png" alt></center><br><center><img src="https://blog.9240.fun/myblogpic/img/updated2.png" alt></center><br><br></li><li><strong>beforeDestory：组件销毁前</strong></li><li><strong>destoryed：组件销毁</strong></li></ol><p>总结：vue实例从创建到销毁住哟有8个阶段。创建前、创建后、渲染前、选然后、更新前、更新后、销毁前、销毁后。<br>使用new Vue()创建vue的实例，然后调用Init()函数初始化对象信息；在渲染前会检查el属性，如果没有就调用$mount(el)方法；然后检查是否有template属性，如果有就编译template的内容进行渲染，如果没有，就编译el指定的节点内容进行渲染。然后创建虚拟DOM $el对象，并用替换挂载节点的内容渲染到试图上。在渲染后和更新后就可以进行dom操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下图是Vue文档里关于实例生命周期的解释图&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src=&quot;https://cn.vuejs.org/images/lifecycle.png&quot; height=&quot;50%&quot; width=&quot;50%&quot;&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3 id=&quot;先贴代码&quot;&gt;&lt;a href=&quot;#先贴代码&quot; class=&quot;headerlink&quot; title=&quot;先贴代码&quot;&gt;&lt;/a&gt;先贴代码&lt;/h3&gt;
    
    </summary>
    
    
      <category term="vue" scheme="https://9240.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>github pages+hexo搭建个人博客</title>
    <link href="https://9240.github.io/2018/05/30/github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://9240.github.io/2018/05/30/github-pages-hexo搭建个人博客/</id>
    <published>2018-05-30T11:52:17.000Z</published>
    <updated>2018-09-21T12:04:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>我在学习了git命令后，自然而然的学习了github，然后得知github pages+hexo可以搭建个人博客后，于是在网上搜了一些教程，费劲千辛万苦，踩了N多坑，终于搭建成功了，效果就是你现在看到的这个样子。由于这种教程网上很多，我就简短的分享一下步骤及我的爬坑经历。</p><p><center><img src="https://9240.github.io/myblogpic/img/0530.jpeg" alt></center></p><h2 id="步骤如下"><a href="#步骤如下" class="headerlink" title="步骤如下"></a>步骤如下</h2><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><p>电脑上装好Nodejs , Git , github账号（电脑中已有SSH KEYS）</p><p>Hexo 安装命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="2-本地搭建"><a href="#2-本地搭建" class="headerlink" title="2. 本地搭建"></a>2. 本地搭建</h3><p>使用Hexo建站，进入新建文件夹（站点根目录），右键选择Git bash，输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></p><p>该命令会在目标文件夹内建立网站所需要的所有文件。接下来是安装依赖包：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><p>到此，本地Hexo博客已经搭好了，浏览器输入localhost:4000可查看查看。</p><h3 id="3-部署到github"><a href="#3-部署到github" class="headerlink" title="3. 部署到github"></a>3. 部署到github</h3><ol><li>在自己的GitHub账号下创建一个新的仓库，命名为username.github.io （<strong>注意：username是你的账号名</strong>）</li><li>配置SSH KEYS,如果没有就添加一个</li><li>测试，输入如下命名<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure></li></ol><p>如果是下面的反馈：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">'github.com (207.97.227.239)'</span> can<span class="string">'t be established.RSA key fingerprint is16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure></p><p>输入<strong>yes</strong>就好，然后会看到：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi 9240! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure></p><p>设置用户信息，输入如下命名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"张三"</span>//张三替换为自己的真名</span><br><span class="line">$ git config --global user.email  <span class="string">"zhangsan@qq.com"</span>//填写自己的邮箱</span><br></pre></td></tr></table></figure></p><h3 id="4-本地的博客更新到GitHub的库中"><a href="#4-本地的博客更新到GitHub的库中" class="headerlink" title="4. 本地的博客更新到GitHub的库中"></a>4. 本地的博客更新到GitHub的库中</h3><ol><li>找到username.github.io项目，复制链接</li><li>用vim命令打开站点根目录下的_config.yml文件，作如下修改<br>deploy:<br>　　type： git<br>　　repository： <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:张三/张三.github.io.git(这就是4.1中复制的链接)<br>　　branch： master</li><li>进入站点文件夹执行如下命名<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></li></ol><p>执行结束前会让你输入github密码，之后就可以访问https://张三.github.io 看到你的博客了，在别人电脑上也可以哦。</p><h3 id="5-爬坑"><a href="#5-爬坑" class="headerlink" title="5. 爬坑"></a>5. 爬坑</h3><h5 id="1-ssh-T-git-github-com"><a href="#1-ssh-T-git-github-com" class="headerlink" title="1. ssh -T git@github.com"></a>1. ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>输出为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi 9240! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure></p><p>由于之前看的教程里面没有这个，后面半句话然我又重新折腾了一遍，这一次又是这种结果，然后就搜索这句话，然来直接执行如下命令即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"张三"</span>//张三替换为自己的真名</span><br><span class="line">$ git config --global user.email  <span class="string">"zhangsan@qq.com"</span>//填写自己的邮箱</span><br></pre></td></tr></table></figure></p><h5 id="2-个人图像问题"><a href="#2-个人图像问题" class="headerlink" title="2. 个人图像问题"></a>2. 个人图像问题</h5><p>如果用本地图片路径为 ./img/xxx.jpg只有在主页图像才会显示,进入到其中一条博客就会找不到，如果路径为 ../../../../../img/xxx.jpg ，那么主页的图像又不能显示,所以我在github pages上又部署了另一种类型的静态网页存放博客上的图片</p><h5 id="3-“所有文章”页面不能搜索"><a href="#3-“所有文章”页面不能搜索" class="headerlink" title="3. “所有文章”页面不能搜索"></a>3. “所有文章”页面不能搜索</h5><p>Yilia（没用其他的主题）主题下点击”所有文章”，提示需要安装一个模块并在Yilia文件夹下的_config.yml文件中加入一些配置（照着他说的做就好了）</p><h5 id="4-Yilia主题下，”关于我”页面在”友链”下面显示问题"><a href="#4-Yilia主题下，”关于我”页面在”友链”下面显示问题" class="headerlink" title="4. Yilia主题下，”关于我”页面在”友链”下面显示问题"></a>4. Yilia主题下，”关于我”页面在”友链”下面显示问题</h5><p>vim 命令进入Yilia主题下的_config.yml文件，找到最好一行<strong>aboutme： xxx</strong>，把前面的缩进删除后，就会在<strong>关于我</strong>显示</p><h5 id="5-Yilia主题下，博客内容展开问题"><a href="#5-Yilia主题下，博客内容展开问题" class="headerlink" title="5. Yilia主题下，博客内容展开问题"></a>5. Yilia主题下，博客内容展开问题</h5><p>在需要折叠的地方加上如下内容即可：</p><pre><code>&lt;!--more--&gt;</code></pre><h5 id="6-vim修改配置"><a href="#6-vim修改配置" class="headerlink" title="6. vim修改配置"></a>6. vim修改配置</h5><p>修改配置的时候，在”:”后面一定要敲一个空格。另外本教程涉及的vim命令如下：</p><ol><li>vim 文件名——打开文件eg：vim _config.yml</li><li>i ：进入编辑模式</li><li>Esc退出编辑模式</li><li>:wq保存并退出</li><li>:q!不保存并退出<br>教程到此就结束了(第一次使用这东西，慢慢摸索)</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我在学习了git命令后，自然而然的学习了github，然后得知github pages+hexo可以搭建个人博客后，于是在网上搜了一些教程，费劲千辛万苦，踩了N多坑，终于搭建成功了，效果就是你现在看到的这个样子。由于这种教程网上很多，我就简短的分享一下步骤及我的爬坑经历。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src=&quot;https://9240.github.io/myblogpic/img/0530.jpeg&quot; alt&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id=&quot;步骤如下&quot;&gt;&lt;a href=&quot;#步骤如下&quot; class=&quot;headerlink&quot; title=&quot;步骤如下&quot;&gt;&lt;/a&gt;步骤如下&lt;/h2&gt;&lt;h3 id=&quot;1-准备工作&quot;&gt;&lt;a href=&quot;#1-准备工作&quot; class=&quot;headerlink&quot; title=&quot;1. 准备工作&quot;&gt;&lt;/a&gt;1. 准备工作&lt;/h3&gt;&lt;p&gt;电脑上装好Nodejs , Git , github账号（电脑中已有SSH KEYS）&lt;/p&gt;
&lt;p&gt;Hexo 安装命令&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install -g hexo-cli&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="github" scheme="https://9240.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://9240.github.io/2018/05/29/hello-world/"/>
    <id>https://9240.github.io/2018/05/29/hello-world/</id>
    <published>2018-05-28T16:00:00.000Z</published>
    <updated>2020-05-31T05:07:25.368Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://9240.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
